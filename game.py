print("\x1b[33m", end="")
import random
import json
import os
import platform
import subprocess
from datetime import datetime
import hashlib


class SpecialAbility:
    def __init__(self, ability_type, **params):
        self.ability_type = ability_type
        self.params = params

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏
        if ability_type == "poison":
            self.params.setdefault('chance', 0)
            self.params.setdefault('damage', 0)
            self.params.setdefault('duration', 1)
            self.params.setdefault('max_stacks', 3)
        elif ability_type == "vampirism":
            self.params.setdefault('chance', 0)
            self.params.setdefault('heal_multiplier', 0.5)
        elif ability_type == "freeze":
            self.params.setdefault('chance', 0)
            self.params.setdefault('duration', 1)
        elif ability_type == "weakness":
            self.params.setdefault('chance', 0)
            self.params.setdefault('duration', 1)
            self.params.setdefault('effect_multiplier', 0.8)
        elif ability_type == "enhancement":
            self.params.setdefault('chance', 0)
            self.params.setdefault('duration', 1)
            self.params.setdefault('effect_multiplier', 1.2)

    def to_dict(self):
        return {
            'ability_type': self.ability_type,
            'params': self.params
        }

    @classmethod
    def from_dict(cls, data):
        return cls(data['ability_type'], **data['params'])


class Warrior:
    def __init__(self, name, health, attack, defense, dodge_chance, crit_chance,
                 crit_damage, initiative, armor_ignore=0, attacks_per_turn=1, special_abilities=None):
        self.name = name
        self.health = health
        self.max_health = health
        self.attack = attack
        self.defense = defense
        self.dodge_chance = dodge_chance
        self.crit_chance = crit_chance
        self.crit_damage = crit_damage
        self.initiative = initiative
        self.armor_ignore = armor_ignore
        self.attacks_per_turn = attacks_per_turn
        self.special_abilities = special_abilities or []

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.damage_dealt = 0
        self.damage_taken = 0
        self.damage_blocked = 0
        self.kills = 0

        # –≠—Ñ—Ñ–µ–∫—Ç—ã
        self.poison_stacks = 0
        self.poison_duration = {}
        self.frozen_until = 0
        self.weakened_until = 0
        self.weakened_multiplier = 1.0
        self.enhanced_until = 0
        self.enhanced_multiplier = 1.0

    def take_damage(self, damage):
        self.health -= damage
        self.damage_taken += damage
        if self.health < 0:
            self.health = 0

    def heal(self, amount):
        self.health += amount
        if self.health > self.max_health:
            self.health = self.max_health

    def process_effects(self, current_round):
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —è–¥–∞
        if self.poison_stacks > 0:
            poison_damage = 0
            expired_poisons = []

            for stack_id, poison_data in self.poison_duration.items():
                if current_round >= poison_data['expires']:
                    expired_poisons.append(stack_id)
                else:
                    # –ù–∞—Ö–æ–¥–∏–º —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å —è–¥–∞
                    poison_ability = None
                    for ability in self.special_abilities:
                        if ability.ability_type == "poison":
                            poison_ability = ability
                            break

                    if poison_ability:
                        poison_damage += poison_ability.params['damage']

            # –ù–∞–Ω–æ—Å–∏–º —É—Ä–æ–Ω –æ—Ç —è–¥–∞
            if poison_damage > 0:
                self.take_damage(poison_damage)
                print(f"üíÄ {self.name} –ø–æ–ª—É—á–∞–µ—Ç {poison_damage} —É—Ä–æ–Ω–∞ –æ—Ç —è–¥–∞")

            # –£–¥–∞–ª—è–µ–º –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ —Å—Ç–∞–∫–∏ —è–¥–∞
            for stack_id in expired_poisons:
                del self.poison_duration[stack_id]
                self.poison_stacks -= 1

            if self.poison_stacks < 0:
                self.poison_stacks = 0

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–º–æ—Ä–æ–∑–∫—É
        if self.frozen_until > 0 and current_round >= self.frozen_until:
            self.frozen_until = 0
            print(f"‚ùÑÔ∏è {self.name} –æ—Ç—Ç–∞–∏–≤–∞–µ—Ç!")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–ª–∞–±–ª–µ–Ω–∏–µ
        if self.weakened_until > 0 and current_round >= self.weakened_until:
            self.weakened_until = 0
            self.weakened_multiplier = 1.0
            print(f"üí™ {self.name} –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å–∏–ª—ã!")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–∏–ª–µ–Ω–∏–µ
        if self.enhanced_until > 0 and current_round >= self.enhanced_until:
            self.enhanced_until = 0
            self.enhanced_multiplier = 1.0
            print(f"üìâ {self.name} —É—Å–∏–ª–µ–Ω–∏–µ –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è!")

    def is_frozen(self, current_round):
        return self.frozen_until > current_round

    def is_alive(self):
        return self.health > 0

    def calculate_damage(self, target):
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —É–∫–ª–æ–Ω–µ–Ω–∏–µ
        if random.random() * 100 <= target.dodge_chance:
            potential_damage = self.attack - target.defense
            if potential_damage < 1:
                potential_damage = 1
            target.damage_blocked += potential_damage
            return 0, "–£–ö–õ–û–ù–ï–ù–ò–ï!", False

        # –†–∞—Å—á–µ—Ç –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏—è –±—Ä–æ–Ω–∏
        ignored_defense = target.defense * (self.armor_ignore / 100)
        effective_defense = target.defense - ignored_defense

        # –ë–∞–∑–æ–≤—ã–π —É—Ä–æ–Ω —Å —É—á–µ—Ç–æ–º –∑–∞—â–∏—Ç—ã
        base_damage = self.attack - effective_defense
        if base_damage < 1:
            base_damage = 1

        # –ü—Ä–∏–º–µ–Ω—è–µ–º –æ—Å–ª–∞–±–ª–µ–Ω–∏–µ/—É—Å–∏–ª–µ–Ω–∏–µ
        final_damage = int(base_damage * self.enhanced_multiplier * target.weakened_multiplier)

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π —É—Ä–æ–Ω
        is_crit = random.random() * 100 <= self.crit_chance
        if is_crit:
            final_damage = int(final_damage * self.crit_damage)
            return final_damage, "–ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –£–†–û–ù!", True
        else:
            return final_damage, "", False

    def try_apply_special_ability(self, target, current_round):
        """–ü–æ–ø—ã—Ç–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–µ–π"""
        applied_abilities = []

        for ability in self.special_abilities:
            if random.random() * 100 <= ability.params['chance']:
                if ability.ability_type == "poison":
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç–∞–∫–æ–≤
                    poison_ability = None
                    for ab in self.special_abilities:
                        if ab.ability_type == "poison":
                            poison_ability = ab
                            break

                    if poison_ability and target.poison_stacks < poison_ability.params['max_stacks']:
                        target.poison_stacks += 1
                        stack_id = f"{id(self)}_{current_round}_{random.randint(1000, 9999)}"
                        target.poison_duration[stack_id] = {
                            'expires': current_round + poison_ability.params['duration']
                        }
                        print(f"‚ò†Ô∏è {self.name} –Ω–∞–∫–ª–∞–¥—ã–≤–∞–µ—Ç —è–¥ –Ω–∞ {target.name}!")
                        applied_abilities.append("poison")

                elif ability.ability_type == "vampirism":
                    # –í–∞–º–ø–∏—Ä–∏–∑–º –±—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω –ø—Ä–∏ –Ω–∞–Ω–µ—Å–µ–Ω–∏–∏ —É—Ä–æ–Ω–∞
                    applied_abilities.append("vampirism")

                elif ability.ability_type == "freeze" and not target.is_frozen(current_round):
                    target.frozen_until = current_round + ability.params['duration']
                    print(f"‚ùÑÔ∏è {self.name} –∑–∞–º–æ—Ä–∞–∂–∏–≤–∞–µ—Ç {target.name} –Ω–∞ {ability.params['duration']} —Ö–æ–¥–æ–≤!")
                    applied_abilities.append("freeze")

                elif ability.ability_type == "weakness" and target.weakened_until <= current_round:
                    target.weakened_until = current_round + ability.params['duration']
                    target.weakened_multiplier = ability.params['effect_multiplier']
                    print(f"üí¢ {self.name} –æ—Å–ª–∞–±–ª—è–µ—Ç {target.name} –Ω–∞ {ability.params['duration']} —Ö–æ–¥–æ–≤!")
                    applied_abilities.append("weakness")

                elif ability.ability_type == "enhancement" and self.enhanced_until <= current_round:
                    self.enhanced_until = current_round + ability.params['duration']
                    self.enhanced_multiplier = ability.params['effect_multiplier']
                    print(f"‚ö° {self.name} —É—Å–∏–ª–∏–≤–∞–µ—Ç—Å—è –Ω–∞ {ability.params['duration']} —Ö–æ–¥–æ–≤!")
                    applied_abilities.append("enhancement")

        return applied_abilities


class Profile:
    def __init__(self, username, password, is_developer=False):
        self.username = username
        self.password_hash = self._hash_password(password)
        self.is_developer = is_developer
        self.wins = 0
        self.losses = 0
        self.rating = 1000

    def _hash_password(self, password):
        return hashlib.sha256(password.encode()).hexdigest()

    def check_password(self, password):
        return self.password_hash == self._hash_password(password)

    def add_win(self):
        self.wins += 1
        self.rating += 25

    def add_loss(self):
        self.losses += 1
        self.rating = max(800, self.rating - 15)

    def to_dict(self):
        return {
            'username': self.username,
            'password_hash': self.password_hash,
            'is_developer': self.is_developer,
            'wins': self.wins,
            'losses': self.losses,
            'rating': self.rating
        }

    @classmethod
    def from_dict(cls, data):
        profile = cls(data['username'], "temp")
        profile.password_hash = data['password_hash']
        profile.is_developer = data['is_developer']
        profile.wins = data['wins']
        profile.losses = data['losses']
        profile.rating = data['rating']
        return profile


class BattleHistory:
    def __init__(self):
        self.history_file = "battle_history.json"
        self.max_history = 5

    def add_battle(self, battle_data):
        history = self.load_history()
        history.insert(0, battle_data)

        if len(history) > self.max_history:
            history = history[:self.max_history]

        self.save_history(history)

    def load_history(self):
        try:
            with open(self.history_file, 'r', encoding='utf-8') as f:
                return json.load(f)
        except (FileNotFoundError, json.JSONDecodeError):
            return []

    def save_history(self, history):
        with open(self.history_file, 'w', encoding='utf-8') as f:
            json.dump(history, f, ensure_ascii=False, indent=2)

    def show_history(self):
        history = self.load_history()
        clear_screen()
        print("üìú –ò–°–¢–û–†–ò–Ø –ü–û–°–õ–ï–î–ù–ò–• –ë–ò–¢–í")
        print("=" * 50)

        if not history:
            print("–ò—Å—Ç–æ—Ä–∏—è –±–∏—Ç–≤ –ø—É—Å—Ç–∞")
            wait_for_enter()
            return

        for i, battle in enumerate(history, 1):
            print(f"\n--- –ë–∏—Ç–≤–∞ {i} ---")
            print(f"üìÖ –î–∞—Ç–∞: {battle['date']}")
            print(f"üéÆ –†–µ–∂–∏–º: {battle['mode']}")

            print(f"üèÜ –ü–û–ë–ï–î–ò–¢–ï–õ–¨:")
            winner = battle['winner']
            print(f"  üë§ {winner['player']} - {winner['warrior']}")

            print(f"üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´:")
            for j, participant in enumerate(battle['participants']):
                place = j + 1
                print(f"  {place}. üë§ {participant['player']} - {participant['warrior']}")

            print(f"‚öîÔ∏è –†–∞—É–Ω–¥–æ–≤: {battle['rounds']}")
            print(f"üí• –û–±—â–∏–π —É—Ä–æ–Ω: {battle['total_damage']}")
            print(f"üõ°Ô∏è –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ —É—Ä–æ–Ω–∞: {battle['total_blocked']}")

        wait_for_enter()


class Leaderboard:
    def __init__(self):
        self.leaderboard_file = "leaderboard.json"

    def update_leaderboard(self, profiles):
        leaderboard = []
        for profile in profiles:
            total_games = profile.wins + profile.losses
            win_rate = (profile.wins / total_games * 100) if total_games > 0 else 0
            leaderboard.append({
                'username': profile.username,
                'wins': profile.wins,
                'losses': profile.losses,
                'win_rate': win_rate,
                'rating': profile.rating
            })

        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Ä–µ–π—Ç–∏–Ω–≥—É
        leaderboard.sort(key=lambda x: x['rating'], reverse=True)

        with open(self.leaderboard_file, 'w', encoding='utf-8') as f:
            json.dump(leaderboard, f, ensure_ascii=False, indent=2)

    def show_leaderboard(self):
        try:
            with open(self.leaderboard_file, 'r', encoding='utf-8') as f:
                leaderboard = json.load(f)
        except (FileNotFoundError, json.JSONDecodeError):
            print("–¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤ –ø—É—Å—Ç–∞")
            wait_for_enter()
            return

        clear_screen()
        print("üèÜ –¢–ê–ë–õ–ò–¶–ê –õ–ò–î–ï–†–û–í")
        print("=" * 50)

        print(f"\n{'–ú–µ—Å—Ç–æ':<6} {'–ò–≥—Ä–æ–∫':<15} {'–ü–æ–±–µ–¥—ã':<8} {'–ü–æ—Ä–∞–∂–µ–Ω–∏—è':<10} {'–†–µ–π—Ç–∏–Ω–≥':<10} {'–í–∏–Ω—Ä–µ–π—Ç':<8}")
        print("-" * 65)

        for i, player in enumerate(leaderboard[:10], 1):
            print(f"{i:<6} {player['username']:<15} {player['wins']:<8} {player['losses']:<10} "
                  f"{player['rating']:<10} {player['win_rate']:.1f}%")

        wait_for_enter()


def clear_screen():
    try:
        if platform.system() == "Windows":
            subprocess.run("cls", shell=True, check=True)
        else:
            subprocess.run("clear", shell=True, check=True)
    except:
        print('\n' * 100)


def wait_for_enter():
    input("\n‚Üµ –ù–∞–∂–º–∏—Ç–µ Enter —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å...")


class ProfileManager:
    def __init__(self):
        self.profiles_file = "profiles.json"
        self.max_profiles = 10
        self.current_profile = None

    def load_profiles(self):
        try:
            with open(self.profiles_file, 'r', encoding='utf-8') as f:
                profiles_data = json.load(f)
                return [Profile.from_dict(data) for data in profiles_data]
        except (FileNotFoundError, json.JSONDecodeError):
            return []

    def save_profiles(self, profiles):
        with open(self.profiles_file, 'w', encoding='utf-8') as f:
            json.dump([profile.to_dict() for profile in profiles], f, ensure_ascii=False, indent=2)

    def create_profile(self):
        clear_screen()
        print("üë§ –°–û–ó–î–ê–ù–ò–ï –ü–†–û–§–ò–õ–Ø")
        print("=" * 30)

        profiles = self.load_profiles()

        if len(profiles) >= self.max_profiles:
            print("‚ùå –î–æ—Å—Ç–∏–≥–Ω—É—Ç–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—Ñ–∏–ª–µ–π (10)")
            wait_for_enter()
            return None

        username = input("–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ").strip()
        if not username:
            print("‚ùå –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
            wait_for_enter()
            return None

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å –∏–º–µ–Ω–∏
        for profile in profiles:
            if profile.username.lower() == username.lower():
                print("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
                wait_for_enter()
                return None

        password = input("–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å: ")
        if not password:
            print("‚ùå –ü–∞—Ä–æ–ª—å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
            wait_for_enter()
            return None

        # –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –ø–∞—Ä–æ–ª—å –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞
        is_developer = False
        dev_password = input("–î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞ –≤–≤–µ–¥–∏—Ç–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –ø–∞—Ä–æ–ª—å (–∏–ª–∏ Enter –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞): ")
        if dev_password == "DevWarriorKop":
            is_developer = True
            print("üîß –°–æ–∑–¥–∞–Ω –ø—Ä–æ—Ñ–∏–ª—å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞!")

        new_profile = Profile(username, password, is_developer)
        profiles.append(new_profile)
        self.save_profiles(profiles)

        print(f"‚úÖ –ü—Ä–æ—Ñ–∏–ª—å '{username}' —Å–æ–∑–¥–∞–Ω!")
        wait_for_enter()
        return new_profile

    def login(self):
        clear_screen()
        print("üîê –í–•–û–î –í –ü–†–û–§–ò–õ–¨")
        print("=" * 30)

        profiles = self.load_profiles()

        if not profiles:
            print("‚ùå –ù–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π")
            wait_for_enter()
            return None

        print("–°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø—Ä–æ—Ñ–∏–ª–∏:")
        for i, profile in enumerate(profiles, 1):
            print(f"{i}. {profile.username}" + (" üîß" if profile.is_developer else ""))

        try:
            choice = int(input("\n–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å: ")) - 1
            if choice < 0 or choice >= len(profiles):
                print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä")
                wait_for_enter()
                return None
        except ValueError:
            print("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ")
            wait_for_enter()
            return None

        selected_profile = profiles[choice]
        password = input("–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å: ")

        if selected_profile.check_password(password):
            print(f"‚úÖ –í—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω –∫–∞–∫ {selected_profile.username}")
            self.current_profile = selected_profile
            wait_for_enter()
            return selected_profile
        else:
            print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å")
            wait_for_enter()
            return None

    def logout(self):
        self.current_profile = None
        print("‚úÖ –í—ã—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω")
        wait_for_enter()

    def verify_player_password(self, player_name):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–æ–ª—è –¥–ª—è –∏–≥—Ä–æ–∫–∞ –ø–æ –∏–º–µ–Ω–∏"""
        profiles = self.load_profiles()
        for profile in profiles:
            if profile.username.lower() == player_name.lower():
                password = input(f"üîê –í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–ª—è –ø—Ä–æ—Ñ–∏–ª—è {profile.username}: ")
                if profile.check_password(password):
                    print(f"‚úÖ –£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥ –¥–ª—è {profile.username}")
                    return profile
                else:
                    print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å")
                    return None
        return None  # –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω - –∏–≥—Ä–∞ –±–µ–∑ –ø—Ä–æ—Ñ–∏–ª—è


class GameManager:
    def __init__(self):
        self.save_dir = "warrior_saves"
        if not os.path.exists(self.save_dir):
            os.makedirs(self.save_dir)
        self.total_slots = 10
        self.battle_history = BattleHistory()
        self.leaderboard = Leaderboard()
        self.profile_manager = ProfileManager()

    def save_warrior(self, warrior, slot):
        if slot < 1 or slot > self.total_slots:
            print(f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Å–ª–æ—Ç. –î–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–ª–æ—Ç—ã: 1-{self.total_slots}")
            return False

        filename = f"{self.save_dir}/warrior_slot_{slot}.json"
        data = {
            "name": warrior.name,
            "health": warrior.max_health,
            "attack": warrior.attack,
            "defense": warrior.defense,
            "dodge_chance": warrior.dodge_chance,
            "crit_chance": warrior.crit_chance,
            "crit_damage": warrior.crit_damage,
            "initiative": warrior.initiative,
            "armor_ignore": warrior.armor_ignore,
            "attacks_per_turn": warrior.attacks_per_turn,
            "special_abilities": [ability.to_dict() for ability in warrior.special_abilities]
        }
        with open(filename, 'w', encoding='utf-8') as f:
            json.dump(data, f, ensure_ascii=False, indent=2)
        print(f"‚úÖ –ü–µ—Ä—Å–æ–Ω–∞–∂ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ —Å–ª–æ—Ç {slot}")
        return True

    def load_warrior(self, slot, show_stats=True):
        if slot < 1 or slot > self.total_slots:
            print(f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Å–ª–æ—Ç. –î–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–ª–æ—Ç—ã: 1-{self.total_slots}")
            return None

        filename = f"{self.save_dir}/warrior_slot_{slot}.json"
        try:
            with open(filename, 'r', encoding='utf-8') as f:
                data = json.load(f)

            if show_stats:
                self.show_warrior_stats(data)

            # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏
            special_abilities = []
            for ability_data in data.get('special_abilities', []):
                special_abilities.append(SpecialAbility.from_dict(ability_data))

            warrior = Warrior(
                data["name"], data["health"], data["attack"], data["defense"],
                data["dodge_chance"], data["crit_chance"], data["crit_damage"],
                data["initiative"], data["armor_ignore"], data.get("attacks_per_turn", 1),
                special_abilities
            )
            print(f"‚úÖ –ü–µ—Ä—Å–æ–Ω–∞–∂ –∑–∞–≥—Ä—É–∂–µ–Ω –∏–∑ —Å–ª–æ—Ç–∞ {slot}")
            return warrior
        except FileNotFoundError:
            print(f"‚ùå –°–ª–æ—Ç {slot} –ø—É—Å—Ç")
            return None
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {e}")
            return None

    def show_warrior_stats(self, warrior_data):
        print(f"\nüìä –•–ê–†–ê–ö–¢–ï–†–ò–°–¢–ò–ö–ò –ü–ï–†–°–û–ù–ê–ñ–ê:")
        print(f"üë§ –ò–º—è: {warrior_data['name']}")
        print(f"‚ù§Ô∏è –ó–¥–æ—Ä–æ–≤—å–µ: {warrior_data['health']}")
        print(f"‚öîÔ∏è –ê—Ç–∞–∫–∞: {warrior_data['attack']}")
        print(f"üõ°Ô∏è –ó–∞—â–∏—Ç–∞: {warrior_data['defense']}")
        print(f"üéØ –®–∞–Ω—Å —É–∫–ª–æ–Ω–µ–Ω–∏—è: {warrior_data['dodge_chance']}%")
        print(f"üî• –®–∞–Ω—Å –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–≥–æ —É—Ä–æ–Ω–∞: {warrior_data['crit_chance']}%")
        print(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π —É—Ä–æ–Ω: {warrior_data['crit_damage']}x")
        print(f"‚ö° –ò–Ω–∏—Ü–∏–∞—Ç–∏–≤–∞: {warrior_data['initiative']}")
        print(f"üîì –ò–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –±—Ä–æ–Ω–∏: {warrior_data['armor_ignore']}%")
        print(f"üëä –£–¥–∞—Ä–æ–≤ –∑–∞ —Ö–æ–¥: {warrior_data.get('attacks_per_turn', 1)}")

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏
        special_abilities = warrior_data.get('special_abilities', [])
        if special_abilities:
            print(f"üåü –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏:")
            for ability in special_abilities:
                if ability['ability_type'] == "poison":
                    print(f"  ‚ò†Ô∏è –Ø–¥: {ability['params']['chance']}% —à–∞–Ω—Å, {ability['params']['damage']} —É—Ä–æ–Ω–∞, "
                          f"{ability['params']['duration']} —Ö–æ–¥–æ–≤, –º–∞–∫—Å {ability['params']['max_stacks']} —Å—Ç–∞–∫–æ–≤")
                elif ability['ability_type'] == "vampirism":
                    print(f"  ü©∏ –í–∞–º–ø–∏—Ä–∏–∑–º: {ability['params']['chance']}% —à–∞–Ω—Å, "
                          f"–ª–µ—á–µ–Ω–∏–µ {ability['params']['heal_multiplier'] * 100}% –æ—Ç —É—Ä–æ–Ω–∞")
                elif ability['ability_type'] == "freeze":
                    print(f"  ‚ùÑÔ∏è –ó–∞–º–æ—Ä–æ–∑–∫–∞: {ability['params']['chance']}% —à–∞–Ω—Å, "
                          f"{ability['params']['duration']} —Ö–æ–¥–æ–≤")
                elif ability['ability_type'] == "weakness":
                    print(f"  üí¢ –°–ª–∞–±–æ—Å—Ç—å: {ability['params']['chance']}% —à–∞–Ω—Å, "
                          f"{ability['params']['duration']} —Ö–æ–¥–æ–≤, –º–Ω–æ–∂–∏—Ç–µ–ª—å {ability['params']['effect_multiplier']}")
                elif ability['ability_type'] == "enhancement":
                    print(f"  ‚ö° –£—Å–∏–ª–µ–Ω–∏–µ: {ability['params']['chance']}% —à–∞–Ω—Å, "
                          f"{ability['params']['duration']} —Ö–æ–¥–æ–≤, –º–Ω–æ–∂–∏—Ç–µ–ª—å {ability['params']['effect_multiplier']}")

    def edit_warrior(self, slot):
        if not self.profile_manager.current_profile or not self.profile_manager.current_profile.is_developer:
            print("‚ùå –¢–æ–ª—å–∫–æ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∏ –º–æ–≥—É—Ç —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π")
            wait_for_enter()
            return

        clear_screen()
        print(f"\n=== –†–ï–î–ê–ö–¢–ò–†–û–í–ê–ù–ò–ï –ü–ï–†–°–û–ù–ê–ñ–ê –í –°–õ–û–¢–ï {slot} ===")

        warrior = self.load_warrior(slot, show_stats=False)
        if not warrior:
            return

        filename = f"{self.save_dir}/warrior_slot_{slot}.json"
        with open(filename, 'r', encoding='utf-8') as f:
            data = json.load(f)

        print(f"\n–¢–µ–∫—É—â–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏:")
        self.show_warrior_stats(data)

        print(f"\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è (–æ—Å—Ç–∞–≤—å—Ç–µ –ø—É—Å—Ç—ã–º –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ):")

        name = input(f"–ò–º—è [{data['name']}]: ").strip()
        health = input(f"–ó–¥–æ—Ä–æ–≤—å–µ [{data['health']}]: ").strip()
        attack = input(f"–ê—Ç–∞–∫–∞ [{data['attack']}]: ").strip()
        defense = input(f"–ó–∞—â–∏—Ç–∞ [{data['defense']}]: ").strip()
        dodge_chance = input(f"–®–∞–Ω—Å —É–∫–ª–æ–Ω–µ–Ω–∏—è (%) [{data['dodge_chance']}]: ").strip()
        crit_chance = input(f"–®–∞–Ω—Å –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–≥–æ —É—Ä–æ–Ω–∞ (%) [{data['crit_chance']}]: ").strip()
        crit_damage = input(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π —É—Ä–æ–Ω [{data['crit_damage']}]: ").strip()
        initiative = input(f"–ò–Ω–∏—Ü–∏–∞—Ç–∏–≤–∞ [{data['initiative']}]: ").strip()
        armor_ignore = input(f"–ò–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –±—Ä–æ–Ω–∏ (%) [{data['armor_ignore']}]: ").strip()
        attacks_per_turn = input(f"–£–¥–∞—Ä–æ–≤ –∑–∞ —Ö–æ–¥ [{data.get('attacks_per_turn', 1)}]: ").strip()

        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
        if name: data['name'] = name
        if health: data['health'] = int(health)
        if attack: data['attack'] = int(attack)
        if defense: data['defense'] = int(defense)
        if dodge_chance: data['dodge_chance'] = float(dodge_chance)
        if crit_chance: data['crit_chance'] = float(crit_chance)
        if crit_damage: data['crit_damage'] = float(crit_damage)
        if initiative: data['initiative'] = int(initiative)
        if armor_ignore: data['armor_ignore'] = float(armor_ignore)
        if attacks_per_turn: data['attacks_per_turn'] = int(attacks_per_turn)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
        with open(filename, 'w', encoding='utf-8') as f:
            json.dump(data, f, ensure_ascii=False, indent=2)

        print(f"\n‚úÖ –ü–µ—Ä—Å–æ–Ω–∞–∂ –≤ —Å–ª–æ—Ç–µ {slot} –æ–±–Ω–æ–≤–ª–µ–Ω!")
        self.show_warrior_stats(data)
        wait_for_enter()

    def delete_warrior(self, slot):
        if not self.profile_manager.current_profile or not self.profile_manager.current_profile.is_developer:
            print("‚ùå –¢–æ–ª—å–∫–æ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∏ –º–æ–≥—É—Ç —É–¥–∞–ª—è—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π")
            wait_for_enter()
            return

        filename = f"{self.save_dir}/warrior_slot_{slot}.json"
        if os.path.exists(filename):
            os.remove(filename)
            print(f"‚úÖ –ü–µ—Ä—Å–æ–Ω–∞–∂ —É–¥–∞–ª–µ–Ω –∏–∑ —Å–ª–æ—Ç–∞ {slot}")
        else:
            print(f"‚ùå –°–ª–æ—Ç {slot} –∏ —Ç–∞–∫ –ø—É—Å—Ç")
        wait_for_enter()

    def show_save_slots(self):
        print(f"\nüìÅ –°–ª–æ—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è (–≤—Å–µ–≥–æ {self.total_slots}):")
        empty_slots = []
        for i in range(1, self.total_slots + 1):
            filename = f"{self.save_dir}/warrior_slot_{i}.json"
            if os.path.exists(filename):
                with open(filename, 'r', encoding='utf-8') as f:
                    data = json.load(f)
                dev_only = " üîß" if self.profile_manager.current_profile and self.profile_manager.current_profile.is_developer else ""
                print(f"–°–ª–æ—Ç {i}: {data['name']} (HP: {data['health']}, ATK: {data['attack']}){dev_only}")
            else:
                empty_slots.append(str(i))
                print(f"–°–ª–æ—Ç {i}: [–ü–£–°–¢–û]")

        if empty_slots:
            print(f"\nüéØ –°–≤–æ–±–æ–¥–Ω—ã–µ —Å–ª–æ—Ç—ã: {', '.join(empty_slots)}")

    def create_default_warriors(self):
        default_warriors = [
            {
                "name": "–ñ–µ–ª–µ–∑–Ω—ã–π —Å—Ç—Ä–∞–∂", "health": 180, "attack": 12, "defense": 15,
                "dodge_chance": 5.0, "crit_chance": 8.0, "crit_damage": 1.5,
                "initiative": 6, "armor_ignore": 5.0, "attacks_per_turn": 1,
                "special_abilities": []
            },
            {
                "name": "–¢–µ–Ω–µ–≤–æ–π –∫–ª–∏–Ω–æ–∫", "health": 65, "attack": 35, "defense": 2,
                "dodge_chance": 35.0, "crit_chance": 40.0, "crit_damage": 2.8,
                "initiative": 22, "armor_ignore": 60.0, "attacks_per_turn": 2,
                "special_abilities": [
                    SpecialAbility("poison", chance=25, damage=5, duration=3, max_stacks=3).to_dict(),
                    SpecialAbility("vampirism", chance=20, heal_multiplier=0.3).to_dict()
                ]
            }
        ]

        slots_empty = True
        for i in range(1, 3):
            if os.path.exists(f"{self.save_dir}/warrior_slot_{i}.json"):
                slots_empty = False
                break

        if slots_empty:
            print("üéÅ –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π...")
            for i, warrior_data in enumerate(default_warriors, 1):
                # –°–æ–∑–¥–∞–µ–º –≤–æ–∏–Ω–∞ –∏–∑ –¥–∞–Ω–Ω—ã—Ö
                special_abilities = []
                for ability_data in warrior_data.get('special_abilities', []):
                    special_abilities.append(SpecialAbility.from_dict(ability_data))

                warrior = Warrior(
                    warrior_data["name"], warrior_data["health"], warrior_data["attack"],
                    warrior_data["defense"], warrior_data["dodge_chance"], warrior_data["crit_chance"],
                    warrior_data["crit_damage"], warrior_data["initiative"], warrior_data["armor_ignore"],
                    warrior_data.get("attacks_per_turn", 1), special_abilities
                )
                self.save_warrior(warrior, i)
            print(f"‚úÖ 2 —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ —Å–æ–∑–¥–∞–Ω—ã –≤ —Å–ª–æ—Ç–∞—Ö 1-2!")
            print("üéØ –°–≤–æ–±–æ–¥–Ω—ã–µ —Å–ª–æ—Ç—ã –¥–ª—è –≤–∞—à–∏—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π: 3-10")
            return True
        return False


def create_warrior_interactive():
    clear_screen()
    print(f"\n=== –°–û–ó–î–ê–ù–ò–ï –ü–ï–†–°–û–ù–ê–ñ–ê ===")
    name = input("–í–≤–µ–¥–∏—Ç–µ –∏–º—è: ")
    health = int(input("–ó–¥–æ—Ä–æ–≤—å–µ: "))
    attack = int(input("–ê—Ç–∞–∫–∞: "))
    defense = int(input("–ó–∞—â–∏—Ç–∞: "))
    dodge_chance = float(input("–®–∞–Ω—Å —É–∫–ª–æ–Ω–µ–Ω–∏—è (%): "))
    crit_chance = float(input("–®–∞–Ω—Å –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–≥–æ —É—Ä–æ–Ω–∞ (%): "))
    crit_damage = float(input("–ú–Ω–æ–∂–∏—Ç–µ–ª—å –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–≥–æ —É—Ä–æ–Ω–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä 1.5): "))
    initiative = int(input("–ò–Ω–∏—Ü–∏–∞—Ç–∏–≤–∞: "))
    armor_ignore = float(input("–ò–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –±—Ä–æ–Ω–∏ (%): "))
    attacks_per_turn = int(input("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–¥–∞—Ä–æ–≤ –∑–∞ —Ö–æ–¥: "))

    # –í—ã–±–æ—Ä —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–µ–π (–¥–æ 2)
    print(f"\nüåü –í–´–ë–û–† –°–ü–ï–¶–ò–ê–õ–¨–ù–´–• –°–ü–û–°–û–ë–ù–û–°–¢–ï–ô (–º–∞–∫—Å–∏–º—É–º 2)")
    print("1. ‚ò†Ô∏è –Ø–¥")
    print("2. ü©∏ –í–∞–º–ø–∏—Ä–∏–∑–º")
    print("3. ‚ùÑÔ∏è –ó–∞–º–æ—Ä–æ–∑–∫–∞")
    print("4. üí¢ –°–ª–∞–±–æ—Å—Ç—å")
    print("5. ‚ö° –£—Å–∏–ª–µ–Ω–∏–µ")
    print("0. –ó–∞–≤–µ—Ä—à–∏—Ç—å –≤—ã–±–æ—Ä")

    special_abilities = []
    abilities_count = 0

    while abilities_count < 2:
        choice = input(f"\n–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å {abilities_count + 1}/2 (0 –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è): ")

        if choice == "0":
            break
        elif choice == "1" and abilities_count < 2:
            print("\n‚ò†Ô∏è –ù–ê–°–¢–†–û–ô–ö–ê –Ø–î–ê:")
            chance = float(input("–®–∞–Ω—Å —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏—è (%): "))
            damage = int(input("–£—Ä–æ–Ω –∑–∞ —Ö–æ–¥: "))
            duration = int(input("–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å (—Ö–æ–¥—ã): "))
            max_stacks = int(input("–ú–∞–∫—Å–∏–º—É–º —Å—Ç–∞–∫–æ–≤: "))
            special_abilities.append(SpecialAbility("poison", chance=chance, damage=damage,
                                                    duration=duration, max_stacks=max_stacks))
            abilities_count += 1
            print("‚úÖ –Ø–¥ –¥–æ–±–∞–≤–ª–µ–Ω!")

        elif choice == "2" and abilities_count < 2:
            print("\nü©∏ –ù–ê–°–¢–†–û–ô–ö–ê –í–ê–ú–ü–ò–†–ò–ó–ú–ê:")
            chance = float(input("–®–∞–Ω—Å —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏—è (%): "))
            heal_multiplier = float(input("–ú–Ω–æ–∂–∏—Ç–µ–ª—å –ª–µ—á–µ–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä 0.5 –¥–ª—è 50% –æ—Ç —É—Ä–æ–Ω–∞): "))
            special_abilities.append(SpecialAbility("vampirism", chance=chance,
                                                    heal_multiplier=heal_multiplier))
            abilities_count += 1
            print("‚úÖ –í–∞–º–ø–∏—Ä–∏–∑–º –¥–æ–±–∞–≤–ª–µ–Ω!")

        elif choice == "3" and abilities_count < 2:
            print("\n‚ùÑÔ∏è –ù–ê–°–¢–†–û–ô–ö–ê –ó–ê–ú–û–†–û–ó–ö–ò:")
            chance = float(input("–®–∞–Ω—Å —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏—è (%): "))
            duration = int(input("–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å (—Ö–æ–¥—ã): "))
            special_abilities.append(SpecialAbility("freeze", chance=chance, duration=duration))
            abilities_count += 1
            print("‚úÖ –ó–∞–º–æ—Ä–æ–∑–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞!")

        elif choice == "4" and abilities_count < 2:
            print("\nüí¢ –ù–ê–°–¢–†–û–ô–ö–ê –°–õ–ê–ë–û–°–¢–ò:")
            chance = float(input("–®–∞–Ω—Å —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏—è (%): "))
            duration = int(input("–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å (—Ö–æ–¥—ã): "))
            effect_multiplier = float(input("–ú–Ω–æ–∂–∏—Ç–µ–ª—å —ç—Ñ—Ñ–µ–∫—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä 0.8 –¥–ª—è -20% —É—Ä–æ–Ω–∞): "))
            special_abilities.append(SpecialAbility("weakness", chance=chance, duration=duration,
                                                    effect_multiplier=effect_multiplier))
            abilities_count += 1
            print("‚úÖ –°–ª–∞–±–æ—Å—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∞!")

        elif choice == "5" and abilities_count < 2:
            print("\n‚ö° –ù–ê–°–¢–†–û–ô–ö–ê –£–°–ò–õ–ï–ù–ò–Ø:")
            chance = float(input("–®–∞–Ω—Å —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏—è (%): "))
            duration = int(input("–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å (—Ö–æ–¥—ã): "))
            effect_multiplier = float(input("–ú–Ω–æ–∂–∏—Ç–µ–ª—å —ç—Ñ—Ñ–µ–∫—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä 1.2 –¥–ª—è +20% —É—Ä–æ–Ω–∞): "))
            special_abilities.append(SpecialAbility("enhancement", chance=chance, duration=duration,
                                                    effect_multiplier=effect_multiplier))
            abilities_count += 1
            print("‚úÖ –£—Å–∏–ª–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ!")

        else:
            print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä –∏–ª–∏ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–µ–π")

    return Warrior(name, health, attack, defense, dodge_chance, crit_chance,
                   crit_damage, initiative, armor_ignore, attacks_per_turn, special_abilities)


def generate_bot_warrior(bot_number):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –¥–ª—è –±–æ—Ç–∞"""
    bot_names = ["–°—Ç–∞–ª—å–Ω–æ–π –ì—Ä–æ–º", "–¢–µ–Ω–µ–≤–æ–π –£–±–∏–π—Ü–∞", "–õ–µ–¥—è–Ω–æ–π –í–∏—Ö—Ä—å", "–û–≥–Ω–µ–Ω–Ω—ã–π –î–µ–º–æ–Ω",
                 "–ö–∞–º–µ–Ω–Ω—ã–π –°—Ç—Ä–∞–∂", "–ù–µ–±–µ—Å–Ω—ã–π –í–æ–∏–Ω", "–Ø–¥–æ–≤–∏—Ç—ã–π –ö–ª–∏–Ω–æ–∫", "–ö—Ä–æ–≤–∞–≤—ã–π –†—ã—Ü–∞—Ä—å",
                 "–ú–æ–ª–æ—Ç –°—É–¥—å–±—ã", "–¢–∏—Ö–∏–π –ü—Ä–∏–∑—Ä–∞–∫", "–ë–µ–∑—É–º–Ω—ã–π –ë–µ—Ä—Å–µ—Ä–∫", "–î—Ä–µ–≤–Ω–∏–π –ú–∞–≥"]

    name = f"–ë–æ—Ç {bot_number}: {random.choice(bot_names)}"

    # –°–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –¥–ª—è –±–æ—Ç–æ–≤
    health = random.randint(80, 150)
    attack = random.randint(15, 30)
    defense = random.randint(5, 20)
    dodge_chance = random.uniform(5.0, 25.0)
    crit_chance = random.uniform(5.0, 20.0)
    crit_damage = random.uniform(1.5, 2.5)
    initiative = random.randint(5, 20)
    armor_ignore = random.uniform(0.0, 30.0)
    attacks_per_turn = random.randint(1, 2)

    # –°–ª—É—á–∞–π–Ω—ã–µ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ (0-2 —à—Ç—É–∫–∏)
    special_abilities = []
    ability_types = ["poison", "vampirism", "freeze", "weakness", "enhancement"]

    num_abilities = random.randint(0, 2)
    if num_abilities > 0:
        chosen_abilities = random.sample(ability_types, num_abilities)

        for ability_type in chosen_abilities:
            if ability_type == "poison":
                special_abilities.append(SpecialAbility("poison",
                                                        chance=random.randint(15, 30),
                                                        damage=random.randint(3, 8),
                                                        duration=random.randint(2, 4),
                                                        max_stacks=random.randint(2, 4)
                                                        ))
            elif ability_type == "vampirism":
                special_abilities.append(SpecialAbility("vampirism",
                                                        chance=random.randint(15, 25),
                                                        heal_multiplier=random.uniform(0.3, 0.6)
                                                        ))
            elif ability_type == "freeze":
                special_abilities.append(SpecialAbility("freeze",
                                                        chance=random.randint(10, 20),
                                                        duration=random.randint(1, 2)
                                                        ))
            elif ability_type == "weakness":
                special_abilities.append(SpecialAbility("weakness",
                                                        chance=random.randint(15, 25),
                                                        duration=random.randint(2, 3),
                                                        effect_multiplier=random.uniform(0.7, 0.9)
                                                        ))
            elif ability_type == "enhancement":
                special_abilities.append(SpecialAbility("enhancement",
                                                        chance=random.randint(15, 25),
                                                        duration=random.randint(2, 3),
                                                        effect_multiplier=random.uniform(1.1, 1.3)
                                                        ))

    return Warrior(name, health, attack, defense, dodge_chance, crit_chance,
                   crit_damage, initiative, armor_ignore, attacks_per_turn, special_abilities)


def show_tutorial():
    """–ü–æ–ª–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ –∏–≥—Ä–µ"""
    clear_screen()
    print("üéì –ü–û–õ–ù–û–ï –û–ë–£–ß–ï–ù–ò–ï –ò–ì–†–ï '–ë–ò–¢–í–ê'")
    print("=" * 50)

    print("\nüìñ –û–°–ù–û–í–´ –ò–ì–†–´:")
    print("‚Ä¢ –≠—Ç–æ –ø–æ—à–∞–≥–æ–≤–∞—è RPG-–±–∏—Ç–≤–∞ —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ —Ä–µ–∂–∏–º–∞–º–∏")
    print("‚Ä¢ –°–æ–∑–¥–∞–≤–∞–π—Ç–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π —Å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º–∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞–º–∏")
    print("‚Ä¢ –°—Ä–∞–∂–∞–π—Ç–µ—Å—å –≤ —Ä–∞–∑–Ω—ã—Ö —Ä–µ–∂–∏–º–∞—Ö: 1x1, 2x2, 3 –∏–≥—Ä–æ–∫–∞, 4 –∏–≥—Ä–æ–∫–∞")
    print("‚Ä¢ –°–æ—Ö—Ä–∞–Ω—è–π—Ç–µ –ª—É—á—à–∏—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π –¥–ª—è –±—É–¥—É—â–∏—Ö –±–∏—Ç–≤")

    wait_for_enter()
    clear_screen()

    print("üë§ –°–ò–°–¢–ï–ú–ê –ü–†–û–§–ò–õ–ï–ô:")
    print("‚Ä¢ –°–æ–∑–¥–∞–≤–∞–π—Ç–µ –ø—Ä–æ—Ñ–∏–ª–∏ —Å –Ω–∏–∫–æ–º –∏ –ø–∞—Ä–æ–ª–µ–º")
    print("‚Ä¢ –ú–∞–∫—Å–∏–º—É–º 10 –ø—Ä–æ—Ñ–∏–ª–µ–π")
    print("‚Ä¢ –ü—Ä–æ—Ñ–∏–ª–∏ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –º–æ–≥—É—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å –∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π")
    print("‚Ä¢ –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –ø–∞—Ä–æ–ª—å –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞: 'DevWarriorKop'")
    print("‚Ä¢ –¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç —Ä–µ–π—Ç–∏–Ω–≥ –∏–≥—Ä–æ–∫–æ–≤")

    wait_for_enter()
    clear_screen()

    print("üéØ –û–°–ù–û–í–ù–´–ï –•–ê–†–ê–ö–¢–ï–†–ò–°–¢–ò–ö–ò:")
    print("‚Ä¢ –ó–¥–æ—Ä–æ–≤—å–µ (HP) - –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—Ä–æ–Ω–∞, –∫–æ—Ç–æ—Ä–æ–µ –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å")
    print("‚Ä¢ –ê—Ç–∞–∫–∞ - –±–∞–∑–æ–≤—ã–π —É—Ä–æ–Ω –∞—Ç–∞–∫–∏")
    print("‚Ä¢ –ó–∞—â–∏—Ç–∞ - —Å–Ω–∏–∂–∞–µ—Ç –ø–æ–ª—É—á–∞–µ–º—ã–π —É—Ä–æ–Ω")
    print("‚Ä¢ –®–∞–Ω—Å —É–∫–ª–æ–Ω–µ–Ω–∏—è (%) - –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –ø–æ–ª–Ω–æ—Å—Ç—å—é –∏–∑–±–µ–∂–∞—Ç—å –∞—Ç–∞–∫–∏")
    print("‚Ä¢ –®–∞–Ω—Å –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–≥–æ —É—Ä–æ–Ω–∞ (%) - –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –Ω–∞–Ω–µ—Å—Ç–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π —É–¥–∞—Ä")
    print("‚Ä¢ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π —É—Ä–æ–Ω - –º–Ω–æ–∂–∏—Ç–µ–ª—å —É—Ä–æ–Ω–∞ –ø—Ä–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–π –∞—Ç–∞–∫–µ")
    print("‚Ä¢ –ò–Ω–∏—Ü–∏–∞—Ç–∏–≤–∞ - –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –ø–æ—Ä—è–¥–æ–∫ —Ö–æ–¥–∞ (—á–µ–º –≤—ã—à–µ, —Ç–µ–º —Ä–∞–Ω—å—à–µ —Ö–æ–¥)")
    print("‚Ä¢ –ò–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –±—Ä–æ–Ω–∏ (%) - —á–∞—Å—Ç—å —É—Ä–æ–Ω–∞, –∏–≥–Ω–æ—Ä–∏—Ä—É—é—â–∞—è –∑–∞—â–∏—Ç—É")
    print("‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–¥–∞—Ä–æ–≤ - —Å–∫–æ–ª—å–∫–æ —Ä–∞–∑ –ø–µ—Ä—Å–æ–Ω–∞–∂ –∞—Ç–∞–∫—É–µ—Ç –∑–∞ —Ö–æ–¥")

    wait_for_enter()
    clear_screen()

    print("üåü –°–ü–ï–¶–ò–ê–õ–¨–ù–´–ï –°–ü–û–°–û–ë–ù–û–°–¢–ò:")
    print("‚Ä¢ –ú–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –¥–æ 2 —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–µ–π –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞")
    print("‚Ä¢ ‚ò†Ô∏è –Ø–¥ - –Ω–∞–Ω–æ—Å–∏—Ç —É—Ä–æ–Ω –∫–∞–∂–¥—ã–π —Ö–æ–¥, –∏–º–µ–µ—Ç –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∏ –º–∞–∫—Å–∏–º—É–º —Å—Ç–∞–∫–æ–≤")
    print("‚Ä¢ ü©∏ –í–∞–º–ø–∏—Ä–∏–∑–º - –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∑–¥–æ—Ä–æ–≤—å–µ –æ—Ç –Ω–∞–Ω–µ—Å–µ–Ω–Ω–æ–≥–æ —É—Ä–æ–Ω–∞")
    print("‚Ä¢ ‚ùÑÔ∏è –ó–∞–º–æ—Ä–æ–∑–∫–∞ - –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫ –ø—Ä–æ–ø—É—Å–∫–∞–µ—Ç —Ö–æ–¥—ã –Ω–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è")
    print("‚Ä¢ üí¢ –°–ª–∞–±–æ—Å—Ç—å - –æ—Å–ª–∞–±–ª—è–µ—Ç –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞, —É–º–µ–Ω—å—à–∞—è –µ–≥–æ —É—Ä–æ–Ω")
    print("‚Ä¢ ‚ö° –£—Å–∏–ª–µ–Ω–∏–µ - —É—Å–∏–ª–∏–≤–∞–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–∂–∞, —É–≤–µ–ª–∏—á–∏–≤–∞—è –µ–≥–æ —É—Ä–æ–Ω")

    wait_for_enter()
    clear_screen()

    print("‚öîÔ∏è –ú–ï–•–ê–ù–ò–ö–ò –ë–û–Ø:")
    print("‚Ä¢ –ü–æ—Ä—è–¥–æ–∫ —Ö–æ–¥–∞ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –∏–Ω–∏—Ü–∏–∞—Ç–∏–≤–æ–π")
    print("‚Ä¢ –ö–∞–∂–¥—ã–π –ø–µ—Ä—Å–æ–Ω–∞–∂ –∞—Ç–∞–∫—É–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑ –∑–∞ —Ö–æ–¥ (–ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —É–¥–∞—Ä–æ–≤)")
    print("‚Ä¢ –ö–∞–∂–¥–∞—è –∞—Ç–∞–∫–∞ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç—Å—è –Ω–∞ —É–∫–ª–æ–Ω–µ–Ω–∏–µ, –∫—Ä–∏—Ç –∏ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ –æ—Ç–¥–µ–ª—å–Ω–æ")
    print("‚Ä¢ –ó–∞—â–∏—Ç–∞ —Å–Ω–∏–∂–∞–µ—Ç —É—Ä–æ–Ω: –£—Ä–æ–Ω = –ê—Ç–∞–∫–∞ - –ó–∞—â–∏—Ç–∞")
    print("‚Ä¢ –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —É—Ä–æ–Ω –≤—Å–µ–≥–¥–∞ —Ä–∞–≤–µ–Ω 1")
    print("‚Ä¢ –£–∫–ª–æ–Ω–µ–Ω–∏–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é –±–ª–æ–∫–∏—Ä—É–µ—Ç –∞—Ç–∞–∫—É")
    print("‚Ä¢ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π —É—Ä–æ–Ω —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç —É—Ä–æ–Ω –Ω–∞ –º–Ω–æ–∂–∏—Ç–µ–ª—å")

    wait_for_enter()
    clear_screen()

    print("üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ò –ò–°–¢–û–†–ò–Ø:")
    print("‚Ä¢ –ù–∞–Ω–µ—Å–µ–Ω–Ω—ã–π —É—Ä–æ–Ω - –æ–±—â–∏–π —É—Ä–æ–Ω, –Ω–∞–Ω–µ—Å–µ–Ω–Ω—ã–π –∞—Ç–∞–∫–∞–º–∏")
    print("‚Ä¢ –ü–æ–ª—É—á–µ–Ω–Ω—ã–π —É—Ä–æ–Ω - –æ–±—â–∏–π —É—Ä–æ–Ω, –ø–æ–ª—É—á–µ–Ω–Ω—ã–π –æ—Ç –∞—Ç–∞–∫")
    print("‚Ä¢ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —É—Ä–æ–Ω - —É—Ä–æ–Ω, –∏–∑–±–µ–≥–Ω—É—Ç—ã–π —á–µ—Ä–µ–∑ —É–∫–ª–æ–Ω–µ–Ω–∏–µ")
    print("‚Ä¢ –£–±–∏–π—Å—Ç–≤–∞ - –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–≤–µ—Ä–∂–µ–Ω–Ω—ã—Ö –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–æ–≤")
    print("‚Ä¢ –ò—Å—Ç–æ—Ä–∏—è –±–∏—Ç–≤ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –±–∏—Ç–≤")
    print("‚Ä¢ –¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ª—É—á—à–∏—Ö –∏–≥—Ä–æ–∫–æ–≤ –ø–æ —Ä–µ–π—Ç–∏–Ω–≥—É")

    wait_for_enter()
    clear_screen()

    print("üéÆ –†–ï–ñ–ò–ú–´ –ò–ì–†–´:")
    print("‚Ä¢ 1 –Ω–∞ 1 - –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∞—è –¥—É—ç–ª—å –¥–≤—É—Ö –≤–æ–∏–Ω–æ–≤")
    print("‚Ä¢ 2 –Ω–∞ 2 - –∫–æ–º–∞–Ω–¥–Ω–∞—è –±–∏—Ç–≤–∞ (2 –∫–æ–º–∞–Ω–¥—ã –ø–æ 2 –∏–≥—Ä–æ–∫–∞)")
    print("‚Ä¢ 3 –∏–≥—Ä–æ–∫–∞ - –∫–æ—Ä–æ–ª–µ–≤—Å–∫–∞—è –±–∏—Ç–≤–∞, –∫–∞–∂–¥—ã–π —Å–∞–º –∑–∞ —Å–µ–±—è")
    print("‚Ä¢ 4 –∏–≥—Ä–æ–∫–∞ - –º–∞—Å—à—Ç–∞–±–Ω–∞—è –±–∏—Ç–≤–∞, –∫–∞–∂–¥—ã–π —Å–∞–º –∑–∞ —Å–µ–±—è")
    print("‚Ä¢ –ë–∏—Ç–≤–∞ —Å –±–æ—Ç–∞–º–∏ - —Å—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–æ—Ç–∏–≤ –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω—ã—Ö –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–æ–≤")
    print("‚Ä¢ –í–æ –≤—Å–µ—Ö —Ä–µ–∂–∏–º–∞—Ö –∫—Ä–æ–º–µ 1x1 –∏–≥—Ä–æ–∫–∏ –≤—ã–±–∏—Ä–∞—é—Ç —Ü–µ–ª–∏ –¥–ª—è –∞—Ç–∞–∫–∏")

    wait_for_enter()
    clear_screen()

    print("üíæ –°–ò–°–¢–ï–ú–ê –°–û–•–†–ê–ù–ï–ù–ò–ô:")
    print("‚Ä¢ 10 —Å–ª–æ—Ç–æ–≤ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π")
    print("‚Ä¢ –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∏ —Å–æ–∑–¥–∞—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏")
    print("‚Ä¢ –¢–æ–ª—å–∫–æ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∏ –º–æ–≥—É—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å –∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π")
    print("‚Ä¢ –°–æ—Ö—Ä–∞–Ω—è–π—Ç–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π –ø–æ—Å–ª–µ –±–∏—Ç–≤")
    print("‚Ä¢ –ó–∞–≥—Ä—É–∂–∞–π—Ç–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π –¥–ª—è –Ω–æ–≤—ã—Ö –±–∏—Ç–≤")

    wait_for_enter()
    clear_screen()

    print("üèÜ –°–¢–†–ê–¢–ï–ì–ò–ß–ï–°–ö–ò–ï –°–û–í–ï–¢–´:")
    print("‚Ä¢ –ë–∞–ª–∞–Ω—Å–∏—Ä—É–π—Ç–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ - –Ω–µ –≤–∫–ª–∞–¥—ã–≤–∞–π—Ç–µ—Å—å —Ç–æ–ª—å–∫–æ –≤ –æ–¥–Ω–æ")
    print("‚Ä¢ –í—ã—Å–æ–∫–∞—è –∏–Ω–∏—Ü–∏–∞—Ç–∏–≤–∞ –ø–æ–∑–≤–æ–ª—è–µ—Ç –∞—Ç–∞–∫–æ–≤–∞—Ç—å –ø–µ—Ä–≤—ã–º")
    print("‚Ä¢ –ö–æ–º–±–∏–Ω–∏—Ä—É–π—Ç–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ –¥–ª—è —Å–∏–Ω–µ—Ä–≥–∏–∏")
    print("‚Ä¢ –í—ã—Å–æ–∫–æ–µ —É–∫–ª–æ–Ω–µ–Ω–∏–µ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ –ø—Ä–æ—Ç–∏–≤ —Å–∏–ª—å–Ω—ã—Ö –∞—Ç–∞–∫")
    print("‚Ä¢ –ò–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –±—Ä–æ–Ω–∏ –ø–æ–ª–µ–∑–Ω–æ –ø—Ä–æ—Ç–∏–≤ —Ç–∞–Ω–∫–æ–≤")
    print("‚Ä¢ –í –º–Ω–æ–≥–æ–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö —Ä–µ–∂–∏–º–∞—Ö –≤—ã–±–∏—Ä–∞–π—Ç–µ —Ü–µ–ª–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫–∏")

    wait_for_enter()


def perform_attack(attacker, defender, round_num, is_multiplayer=False):
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∞—Ç–∞–∫–∏ –¥–ª—è –≤—Å–µ—Ö —Ä–µ–∂–∏–º–æ–≤"""
    if not defender.is_alive():
        return True  # –¶–µ–ª—å —É–∂–µ –º–µ—Ä—Ç–≤–∞

    print(f"\n  {attacker.name} –∞—Ç–∞–∫—É–µ—Ç {defender.name}!")

    for attack_num in range(attacker.attacks_per_turn):
        if not defender.is_alive():
            return True

        damage, message, is_crit = attacker.calculate_damage(defender)

        if damage == 0 and message == "–£–ö–õ–û–ù–ï–ù–ò–ï!":
            print(f"  ‚ö° {defender.name} —É–≤–µ—Ä–Ω—É–ª—Å—è –æ—Ç –∞—Ç–∞–∫–∏!")
        else:
            defender.take_damage(damage)
            attacker.damage_dealt += damage
            if message:
                print(f"  üî• {message}")
            print(f"  üí• –ù–∞–Ω–æ—Å–∏—Ç {damage} —É—Ä–æ–Ω–∞!")

            # –í–∞–º–ø–∏—Ä–∏–∑–º
            for ability in attacker.special_abilities:
                if ability.ability_type == "vampirism" and is_crit:
                    if random.random() * 100 <= ability.params['chance']:
                        heal_amount = int(damage * ability.params['heal_multiplier'])
                        attacker.heal(heal_amount)
                        print(f"  ü©∏ {attacker.name} –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç {heal_amount} HP!")

            # –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏
            applied_abilities = attacker.try_apply_special_ability(defender, round_num)

            print(f"  ‚ù§Ô∏è –£ {defender.name} –æ—Å—Ç–∞–ª–æ—Å—å {defender.health}/{defender.max_health} –∑–¥–æ—Ä–æ–≤—å—è")

            if not defender.is_alive():
                attacker.kills += 1
                print(f"  üíÄ {defender.name} —É–±–∏—Ç!")
                return True

    return False


def update_profiles_statistics(game_manager, winners, all_players, authenticated_profiles):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π"""
    profiles = game_manager.profile_manager.load_profiles()

    # –°–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ –ø—Ä–æ—Ñ–∏–ª—è–º
    profile_dict = {profile.username: profile for profile in profiles}

    for profile in authenticated_profiles:
        if profile and profile.username in profile_dict:
            if profile.username in winners:
                profile_dict[profile.username].add_win()
            elif profile.username in all_players:
                profile_dict[profile.username].add_loss()

    game_manager.profile_manager.save_profiles(profiles)
    game_manager.leaderboard.update_leaderboard(profiles)


def print_battle_statistics(warriors, player_names, rounds):
    """–ü–µ—á–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –±–∏—Ç–≤—ã"""
    print("\n" + "=" * 50)
    print("üìä –ü–û–î–†–û–ë–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ë–ò–¢–í–´:")

    for i, warrior in enumerate(warriors):
        print(f"\n{warrior.name} ({player_names[i]}):")
        print(f"  –ó–¥–æ—Ä–æ–≤—å–µ: {warrior.health}/{warrior.max_health}")
        print(f"  –ù–∞–Ω–µ—Å–µ–Ω–æ —É—Ä–æ–Ω–∞: {warrior.damage_dealt}")
        print(f"  –ü–æ–ª—É—á–µ–Ω–æ —É—Ä–æ–Ω–∞: {warrior.damage_taken}")
        print(f"  –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ —É—Ä–æ–Ω–∞: {warrior.damage_blocked}")
        print(f"  –£–±–∏–π—Å—Ç–≤–∞: {warrior.kills}")

    print(f"\nüìà –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
    total_damage = sum(w.damage_dealt for w in warriors)
    total_blocked = sum(w.damage_blocked for w in warriors)
    total_kills = sum(w.kills for w in warriors)

    print(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞—É–Ω–¥–æ–≤: {rounds}")
    print(f"–û–±—â–∏–π –Ω–∞–Ω–µ—Å–µ–Ω–Ω—ã–π —É—Ä–æ–Ω: {total_damage}")
    print(f"–û–±—â–∏–π –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —É—Ä–æ–Ω: {total_blocked}")
    print(f"–í—Å–µ–≥–æ —É–±–∏–π—Å—Ç–≤: {total_kills}")


def offer_save_warriors(game_manager, warriors):
    """–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤–æ–∏–Ω–æ–≤ –ø–æ—Å–ª–µ –±–∏—Ç–≤—ã"""
    if game_manager.profile_manager.current_profile and game_manager.profile_manager.current_profile.is_developer:
        save_choice = input("\nüíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π? (y/n): ").lower()
        if save_choice == 'y':
            clear_screen()
            game_manager.show_save_slots()
            for i, warrior in enumerate(warriors):
                slot = int(input(f"–í–≤–µ–¥–∏—Ç–µ —Å–ª–æ—Ç –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è {warrior.name} (1-{game_manager.total_slots}): "))
                game_manager.save_warrior(warrior, slot)


def battle_round_1v1(attacker, defender, round_num):
    print(f"\n--- –†–∞—É–Ω–¥ {round_num} ---")

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —ç—Ñ—Ñ–µ–∫—Ç–æ–≤ —É –∞—Ç–∞–∫—É—é—â–µ–≥–æ
    attacker.process_effects(round_num)
    if not attacker.is_alive():
        print(f"üíÄ {attacker.name} —É–º–µ—Ä –æ—Ç —ç—Ñ—Ñ–µ–∫—Ç–æ–≤ –ø–µ—Ä–µ–¥ –∞—Ç–∞–∫–æ–π!")
        return True

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–º–æ—Ä–æ–∑–∫—É
    if attacker.is_frozen(round_num):
        print(f"‚ùÑÔ∏è {attacker.name} –∑–∞–º–æ—Ä–æ–∂–µ–Ω –∏ –ø—Ä–æ–ø—É—Å–∫–∞–µ—Ç —Ö–æ–¥!")
        return False

    print(f"{attacker.name} –∞—Ç–∞–∫—É–µ—Ç {defender.name}!")

    # –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –∞—Ç–∞–∫–∏
    for attack_num in range(attacker.attacks_per_turn):
        if not defender.is_alive():
            break

        killed = perform_attack(attacker, defender, round_num)
        if killed:
            break

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —ç—Ñ—Ñ–µ–∫—Ç–æ–≤ —É –∑–∞—â–∏—â–∞—é—â–µ–≥–æ—Å—è
    if defender.is_alive():
        defender.process_effects(round_num)

    return False


def run_1v1_battle(warrior1, warrior2, game_manager, player_names, authenticated_profiles):
    clear_screen()
    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫—Ç–æ –∞—Ç–∞–∫—É–µ—Ç –ø–µ—Ä–≤—ã–º
    if warrior1.initiative > warrior2.initiative:
        attacker, defender = warrior1, warrior2
        attacker_player, defender_player = player_names[0], player_names[1]
        print(f"\nüéØ {warrior1.name} ({attacker_player}) –∞—Ç–∞–∫—É–µ—Ç –ø–µ—Ä–≤—ã–º (–∏–Ω–∏—Ü–∏–∞—Ç–∏–≤–∞: {warrior1.initiative})")
    elif warrior2.initiative > warrior1.initiative:
        attacker, defender = warrior2, warrior1
        attacker_player, defender_player = player_names[1], player_names[0]
        print(f"\nüéØ {warrior2.name} ({attacker_player}) –∞—Ç–∞–∫—É–µ—Ç –ø–µ—Ä–≤—ã–º (–∏–Ω–∏—Ü–∏–∞—Ç–∏–≤–∞: {warrior2.initiative})")
    else:
        attacker, defender = random.choice([(warrior1, warrior2), (warrior2, warrior1)])
        if attacker == warrior1:
            attacker_player, defender_player = player_names[0], player_names[1]
        else:
            attacker_player, defender_player = player_names[1], player_names[0]
        print(f"\nüéØ –ü–µ—Ä–≤—ã–º –∞—Ç–∞–∫—É–µ—Ç {attacker.name} ({attacker_player}) (–Ω–∏—á—å—è –≤ –∏–Ω–∏—Ü–∏–∞—Ç–∏–≤–µ)")

    wait_for_enter()

    # –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –±–∏—Ç–≤—ã
    round_num = 1
    winner_name = "–ù–∏—á—å—è"
    winner_warrior = "–ù–∏—á—å—è"

    while warrior1.is_alive() and warrior2.is_alive():
        clear_screen()
        poison_death = battle_round_1v1(attacker, defender, round_num)

        if poison_death:
            break

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–º–µ—Ä—Ç—å
        if not defender.is_alive():
            print(f"\nüíÄ {defender.name} –ø–∞–ª –≤ –±–æ—é!")
            print(f"üèÜ –ü–û–ë–ï–î–ò–¢–ï–õ–¨: {attacker.name} ({attacker_player})!")
            winner_name = attacker_player
            winner_warrior = attacker.name
            break

        # –°–º–µ–Ω–∞ —Ä–æ–ª–µ–π –∞—Ç–∞–∫—É—é—â–∏–π/–∑–∞—â–∏—â–∞—é—â–∏–π—Å—è
        attacker, defender = defender, attacker
        attacker_player, defender_player = defender_player, attacker_player
        round_num += 1

        # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –Ω–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞—É–Ω–¥–æ–≤
        if round_num > 50:
            print("\n‚è∞ –ë–∏—Ç–≤–∞ –∑–∞—Ç—è–Ω—É–ª–∞—Å—å! –ù–∏—á—å—è!")
            break

        wait_for_enter()

    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—è
    print_battle_statistics([warrior1, warrior2], player_names, round_num - 1)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
    battle_data = {
        "date": datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
        "mode": "1 –Ω–∞ 1",
        "winner": {"player": winner_name, "warrior": winner_warrior},
        "participants": [
            {"player": player_names[0], "warrior": warrior1.name},
            {"player": player_names[1], "warrior": warrior2.name}
        ],
        "rounds": round_num - 1,
        "total_damage": warrior1.damage_dealt + warrior2.damage_dealt,
        "total_blocked": warrior1.damage_blocked + warrior2.damage_blocked
    }
    game_manager.battle_history.add_battle(battle_data)

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–æ—Ñ–∏–ª–µ–π
    if winner_name != "–ù–∏—á—å—è":
        update_profiles_statistics(game_manager, [winner_name], player_names, authenticated_profiles)

    # –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π
    offer_save_warriors(game_manager, [warrior1, warrior2])

    wait_for_enter()


def run_2v2_battle(team1, team2, game_manager, player_names, authenticated_profiles):
    """–ë–∏—Ç–≤–∞ 2 –Ω–∞ 2 - –∫–æ–º–∞–Ω–¥–Ω—ã–π —Ä–µ–∂–∏–º"""
    clear_screen()
    print("‚öîÔ∏è –ë–ò–¢–í–ê 2 –ù–ê 2 - –ö–û–ú–ê–ù–î–ù–´–ô –†–ï–ñ–ò–ú")

    # –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ—Ö –≤–æ–∏–Ω–æ–≤ –∏ —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∏–Ω–∏—Ü–∏–∞—Ç–∏–≤–µ
    all_warriors = team1 + team2
    all_warriors.sort(key=lambda w: w.initiative, reverse=True)

    print("\nüéØ –ü–æ—Ä—è–¥–æ–∫ —Ö–æ–¥–æ–≤:")
    for i, warrior in enumerate(all_warriors, 1):
        team = "–ö–æ–º–∞–Ω–¥–∞ 1" if warrior in team1 else "–ö–æ–º–∞–Ω–¥–∞ 2"
        print(f"  {i}. {warrior.name} ({team}) - –∏–Ω–∏—Ü–∏–∞—Ç–∏–≤–∞: {warrior.initiative}")

    wait_for_enter()

    round_num = 1
    while True:
        clear_screen()
        print(f"--- –†–∞—É–Ω–¥ {round_num} ---")

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–æ–º–∞–Ω–¥
        print(f"\nüìä –ö–û–ú–ê–ù–î–ê 1:")
        for warrior in team1:
            status = "‚ù§Ô∏è" if warrior.is_alive() else "üíÄ"
            print(f"  {status} {warrior.name}: {warrior.health}/{warrior.max_health} HP")

        print(f"\nüìä –ö–û–ú–ê–ù–î–ê 2:")
        for warrior in team2:
            status = "‚ù§Ô∏è" if warrior.is_alive() else "üíÄ"
            print(f"  {status} {warrior.name}: {warrior.health}/{warrior.max_health} HP")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–±–µ–¥—É
        team1_alive = any(warrior.is_alive() for warrior in team1)
        team2_alive = any(warrior.is_alive() for warrior in team2)

        if not team1_alive:
            winner_team = team2
            winner_players = [player_names[2], player_names[3]]
            break
        if not team2_alive:
            winner_team = team1
            winner_players = [player_names[0], player_names[1]]
            break

        # –•–æ–¥—ã –≤–æ–∏–Ω–æ–≤
        for warrior in all_warriors:
            if not warrior.is_alive():
                continue

            # –û–±—Ä–∞–±–æ—Ç–∫–∞ —ç—Ñ—Ñ–µ–∫—Ç–æ–≤
            warrior.process_effects(round_num)
            if not warrior.is_alive():
                continue

            if warrior.is_frozen(round_num):
                print(f"‚ùÑÔ∏è {warrior.name} –∑–∞–º–æ—Ä–æ–∂–µ–Ω –∏ –ø—Ä–æ–ø—É—Å–∫–∞–µ—Ç —Ö–æ–¥!")
                continue

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤—Ä–∞–∂–µ—Å–∫—É—é –∫–æ–º–∞–Ω–¥—É
            if warrior in team1:
                enemy_team = team2
            else:
                enemy_team = team1

            # –í—ã–±–∏—Ä–∞–µ–º –∂–∏–≤—É—é —Ü–µ–ª—å
            alive_enemies = [enemy for enemy in enemy_team if enemy.is_alive()]
            if not alive_enemies:
                continue

            # –ï—Å–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ü–µ–ª–µ–π - –≤—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—É—é
            target = random.choice(alive_enemies)

            # –ê—Ç–∞–∫–∞
            perform_attack(warrior, target, round_num, True)

        round_num += 1
        if round_num > 50:
            print("\n‚è∞ –ë–∏—Ç–≤–∞ –∑–∞—Ç—è–Ω—É–ª–∞—Å—å! –ù–∏—á—å—è!")
            break

        wait_for_enter()

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–±–µ–¥–∏—Ç–µ–ª—è
    if team1_alive:
        winner_team = team1
        winner_players = [player_names[0], player_names[1]]
        winner_names = [w.name for w in winner_team if w.is_alive()]
    else:
        winner_team = team2
        winner_players = [player_names[2], player_names[3]]
        winner_names = [w.name for w in winner_team if w.is_alive()]

    print(f"\nüèÜ –ü–û–ë–ï–î–ò–¢–ï–õ–ò: {', '.join(winner_names)}!")
    print(f"üéâ –ö–æ–º–∞–Ω–¥–∞: {', '.join(winner_players)}")

    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    print_battle_statistics(all_warriors, player_names, round_num - 1)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
    battle_data = {
        "date": datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
        "mode": "2 –Ω–∞ 2",
        "winner": {"player": f"{winner_players[0]} –∏ {winner_players[1]}",
                   "warrior": f"–ö–æ–º–∞–Ω–¥–∞: {', '.join(winner_names)}"},
        "participants": [
            {"player": player_names[0], "warrior": team1[0].name},
            {"player": player_names[1], "warrior": team1[1].name},
            {"player": player_names[2], "warrior": team2[0].name},
            {"player": player_names[3], "warrior": team2[1].name}
        ],
        "rounds": round_num - 1,
        "total_damage": sum(w.damage_dealt for w in all_warriors),
        "total_blocked": sum(w.damage_blocked for w in all_warriors)
    }
    game_manager.battle_history.add_battle(battle_data)

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–æ—Ñ–∏–ª–µ–π
    update_profiles_statistics(game_manager, winner_players, player_names, authenticated_profiles)

    offer_save_warriors(game_manager, all_warriors)
    wait_for_enter()


def run_royal_battle(warriors, game_manager, player_names, authenticated_profiles, mode_name):
    """–û–±—â–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∫–æ—Ä–æ–ª–µ–≤—Å–∫–∏—Ö –±–∏—Ç–≤ (3 –∏ 4 –∏–≥—Ä–æ–∫–∞)"""
    clear_screen()
    print(f"‚öîÔ∏è {mode_name.upper()} - –ö–û–†–û–õ–ï–í–°–ö–ê–Ø –ë–ò–¢–í–ê")

    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∏–Ω–∏—Ü–∏–∞—Ç–∏–≤–µ
    warriors.sort(key=lambda w: w.initiative, reverse=True)

    print("\nüéØ –ü–æ—Ä—è–¥–æ–∫ —Ö–æ–¥–æ–≤:")
    for i, warrior in enumerate(warriors, 1):
        print(f"  {i}. {warrior.name} - –∏–Ω–∏—Ü–∏–∞—Ç–∏–≤–∞: {warrior.initiative}")

    wait_for_enter()

    round_num = 1
    while True:
        clear_screen()
        print(f"--- –†–∞—É–Ω–¥ {round_num} ---")

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤
        print(f"\nüìä –°–û–°–¢–û–Ø–ù–ò–ï –ò–ì–†–û–ö–û–í:")
        alive_count = 0
        for i, warrior in enumerate(warriors):
            status = "‚ù§Ô∏è" if warrior.is_alive() else "üíÄ"
            print(f"  {status} {warrior.name}: {warrior.health}/{warrior.max_health} HP")
            if warrior.is_alive():
                alive_count += 1

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–±–µ–¥—É
        if alive_count <= 1:
            break

        # –•–æ–¥—ã –≤–æ–∏–Ω–æ–≤
        for warrior in warriors:
            if not warrior.is_alive():
                continue

            # –û–±—Ä–∞–±–æ—Ç–∫–∞ —ç—Ñ—Ñ–µ–∫—Ç–æ–≤
            warrior.process_effects(round_num)
            if not warrior.is_alive():
                continue

            if warrior.is_frozen(round_num):
                print(f"‚ùÑÔ∏è {warrior.name} –∑–∞–º–æ—Ä–æ–∂–µ–Ω –∏ –ø—Ä–æ–ø—É—Å–∫–∞–µ—Ç —Ö–æ–¥!")
                continue

            # –í—ã–±–∏—Ä–∞–µ–º –∂–∏–≤—É—é —Ü–µ–ª—å (–Ω–µ —Å–µ–±—è)
            alive_enemies = [w for w in warriors if w != warrior and w.is_alive()]
            if not alive_enemies:
                continue

            # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—É—é —Ü–µ–ª—å
            target = random.choice(alive_enemies)

            # –ê—Ç–∞–∫–∞
            perform_attack(warrior, target, round_num, True)

        round_num += 1
        if round_num > 50:
            print("\n‚è∞ –ë–∏—Ç–≤–∞ –∑–∞—Ç—è–Ω—É–ª–∞—Å—å! –ù–∏—á—å—è!")
            break

        wait_for_enter()

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–±–µ–¥–∏—Ç–µ–ª—è
    winner = None
    for warrior in warriors:
        if warrior.is_alive():
            winner = warrior
            break

    if winner:
        winner_index = warriors.index(winner)
        winner_player = player_names[winner_index]
        print(f"\nüèÜ –ü–û–ë–ï–î–ò–¢–ï–õ–¨: {winner.name} ({winner_player})!")
    else:
        print("\nü§ù –ù–∏—á—å—è! –í—Å–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏ –ø–∞–ª–∏ –≤ –±–æ—é!")

    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    print_battle_statistics(warriors, player_names, round_num - 1)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
    battle_data = {
        "date": datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
        "mode": mode_name,
        "winner": {"player": winner_player if winner else "–ù–∏—á—å—è", "warrior": winner.name if winner else "–ù–∏—á—å—è"},
        "participants": [{"player": player_names[i], "warrior": w.name} for i, w in enumerate(warriors)],
        "rounds": round_num - 1,
        "total_damage": sum(w.damage_dealt for w in warriors),
        "total_blocked": sum(w.damage_blocked for w in warriors)
    }
    game_manager.battle_history.add_battle(battle_data)

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–æ—Ñ–∏–ª–µ–π
    if winner:
        update_profiles_statistics(game_manager, [winner_player], player_names, authenticated_profiles)

    offer_save_warriors(game_manager, warriors)
    wait_for_enter()


def run_bot_battle(warriors, game_manager, player_names, authenticated_profiles, num_bots):
    """–ë–∏—Ç–≤–∞ —Å –±–æ—Ç–∞–º–∏"""
    clear_screen()
    print(f"ü§ñ –ë–ò–¢–í–ê –° –ë–û–¢–ê–ú–ò - {len(warriors)} –£–ß–ê–°–¢–ù–ò–ö–û–í")

    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∏–Ω–∏—Ü–∏–∞—Ç–∏–≤–µ
    warriors.sort(key=lambda w: w.initiative, reverse=True)

    print("\nüéØ –ü–æ—Ä—è–¥–æ–∫ —Ö–æ–¥–æ–≤:")
    for i, warrior in enumerate(warriors, 1):
        player_type = "–ò–≥—Ä–æ–∫" if i <= (len(warriors) - num_bots) else "–ë–æ—Ç"
        print(f"  {i}. {warrior.name} ({player_type}) - –∏–Ω–∏—Ü–∏–∞—Ç–∏–≤–∞: {warrior.initiative}")

    wait_for_enter()

    round_num = 1
    while True:
        clear_screen()
        print(f"--- –†–∞—É–Ω–¥ {round_num} ---")

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
        print(f"\nüìä –°–û–°–¢–û–Ø–ù–ò–ï –£–ß–ê–°–¢–ù–ò–ö–û–í:")
        alive_count = 0
        for i, warrior in enumerate(warriors):
            player_type = "üë§" if i < (len(warriors) - num_bots) else "ü§ñ"
            status = "‚ù§Ô∏è" if warrior.is_alive() else "üíÄ"
            print(f"  {status} {player_type} {warrior.name}: {warrior.health}/{warrior.max_health} HP")
            if warrior.is_alive():
                alive_count += 1

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–±–µ–¥—É
        if alive_count <= 1:
            break

        # –•–æ–¥—ã –≤–æ–∏–Ω–æ–≤
        for i, warrior in enumerate(warriors):
            if not warrior.is_alive():
                continue

            # –û–±—Ä–∞–±–æ—Ç–∫–∞ —ç—Ñ—Ñ–µ–∫—Ç–æ–≤
            warrior.process_effects(round_num)
            if not warrior.is_alive():
                continue

            if warrior.is_frozen(round_num):
                print(f"‚ùÑÔ∏è {warrior.name} –∑–∞–º–æ—Ä–æ–∂–µ–Ω –∏ –ø—Ä–æ–ø—É—Å–∫–∞–µ—Ç —Ö–æ–¥!")
                continue

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∏–≥—Ä–æ–∫–∞ (–±–æ—Ç –∏–ª–∏ —á–µ–ª–æ–≤–µ–∫)
            is_bot = i >= (len(warriors) - num_bots)

            # –í—ã–±–∏—Ä–∞–µ–º –∂–∏–≤—É—é —Ü–µ–ª—å (–Ω–µ —Å–µ–±—è)
            alive_enemies = [w for w in warriors if w != warrior and w.is_alive()]
            if not alive_enemies:
                continue

            if is_bot:
                # –ë–æ—Ç—ã –≤—ã–±–∏—Ä–∞—é—Ç —Å–ª—É—á–∞–π–Ω—É—é —Ü–µ–ª—å
                target = random.choice(alive_enemies)
            else:
                # –ò–≥—Ä–æ–∫ –≤—ã–±–∏—Ä–∞–µ—Ç —Ü–µ–ª—å
                print(f"\nüéØ –•–æ–¥ –∏–≥—Ä–æ–∫–∞: {warrior.name}")
                print("–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ü–µ–ª–∏:")
                for j, enemy in enumerate(alive_enemies, 1):
                    enemy_type = "ü§ñ" if warriors.index(enemy) >= (len(warriors) - num_bots) else "üë§"
                    print(f"  {j}. {enemy_type} {enemy.name} (HP: {enemy.health}/{enemy.max_health})")

                try:
                    choice = int(input("\n–í—ã–±–µ—Ä–∏—Ç–µ —Ü–µ–ª—å –¥–ª—è –∞—Ç–∞–∫–∏: ")) - 1
                    if choice < 0 or choice >= len(alive_enemies):
                        print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä, –∞—Ç–∞–∫—É–µ–º —Å–ª—É—á–∞–π–Ω—É—é —Ü–µ–ª—å")
                        target = random.choice(alive_enemies)
                    else:
                        target = alive_enemies[choice]
                except ValueError:
                    print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥, –∞—Ç–∞–∫—É–µ–º —Å–ª—É—á–∞–π–Ω—É—é —Ü–µ–ª—å")
                    target = random.choice(alive_enemies)

            # –ê—Ç–∞–∫–∞
            perform_attack(warrior, target, round_num, True)

        round_num += 1
        if round_num > 50:
            print("\n‚è∞ –ë–∏—Ç–≤–∞ –∑–∞—Ç—è–Ω—É–ª–∞—Å—å! –ù–∏—á—å—è!")
            break

        wait_for_enter()

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–±–µ–¥–∏—Ç–µ–ª—è
    winner = None
    for warrior in warriors:
        if warrior.is_alive():
            winner = warrior
            break

    if winner:
        winner_index = warriors.index(winner)
        winner_player = player_names[winner_index]
        player_type = "ü§ñ –ë–æ—Ç" if winner_index >= (len(warriors) - num_bots) else "üë§ –ò–≥—Ä–æ–∫"
        print(f"\nüèÜ –ü–û–ë–ï–î–ò–¢–ï–õ–¨: {winner.name} ({player_type})!")
    else:
        print("\nü§ù –ù–∏—á—å—è! –í—Å–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏ –ø–∞–ª–∏ –≤ –±–æ—é!")

    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    print_battle_statistics(warriors, player_names, round_num - 1)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
    battle_data = {
        "date": datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
        "mode": f"–ë–∏—Ç–≤–∞ —Å –±–æ—Ç–∞–º–∏ ({num_bots} –±–æ—Ç–æ–≤)",
        "winner": {"player": winner_player if winner else "–ù–∏—á—å—è", "warrior": winner.name if winner else "–ù–∏—á—å—è"},
        "participants": [{"player": player_names[i], "warrior": w.name} for i, w in enumerate(warriors)],
        "rounds": round_num - 1,
        "total_damage": sum(w.damage_dealt for w in warriors),
        "total_blocked": sum(w.damage_blocked for w in warriors)
    }
    game_manager.battle_history.add_battle(battle_data)

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–æ—Ñ–∏–ª–µ–π (—Ç–æ–ª—å–∫–æ –¥–ª—è —Ä–µ–∞–ª—å–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤)
    if winner:
        winner_index = warriors.index(winner)
        if winner_index < (len(warriors) - num_bots):  # –ï—Å–ª–∏ –ø–æ–±–µ–¥–∏–ª —Ä–µ–∞–ª—å–Ω—ã–π –∏–≥—Ä–æ–∫
            real_players = [p for i, p in enumerate(player_names) if i < (len(warriors) - num_bots)]
            real_profiles = [p for i, p in enumerate(authenticated_profiles) if i < (len(warriors) - num_bots)]
            update_profiles_statistics(game_manager, [winner_player], real_players, real_profiles)

    offer_save_warriors(game_manager, warriors)
    wait_for_enter()


def get_warriors_for_multiplayer(game_manager, num_players, mode_name):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤–æ–∏–Ω–æ–≤ –¥–ª—è –º–Ω–æ–≥–æ–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–π –±–∏—Ç–≤—ã —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –ø–∞—Ä–æ–ª–µ–π"""
    clear_screen()
    print(f"\n=== {mode_name.upper()} ===")
    print("1. –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π")
    print("2. –ó–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è")

    choice = input("\n–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç: ")

    warriors = []
    player_names = []
    authenticated_profiles = []

    for i in range(num_players):
        clear_screen()
        print(f"\n--- –ò–≥—Ä–æ–∫ {i + 1} ---")

        player_name = input("–í–≤–µ–¥–∏—Ç–µ –∏–º—è –∏–≥—Ä–æ–∫–∞: ").strip() or f"–ò–≥—Ä–æ–∫ {i + 1}"

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä–æ–ª—å –¥–ª—è –∏–≥—Ä–æ–∫–∞
        profile = game_manager.profile_manager.verify_player_password(player_name)

        if profile:
            player_names.append(profile.username)
            authenticated_profiles.append(profile)
        else:
            player_names.append(player_name)
            authenticated_profiles.append(None)

        if choice == "1":
            warrior = create_warrior_interactive()
        elif choice == "2":
            game_manager.show_save_slots()
            slot = int(input(f"–í–≤–µ–¥–∏—Ç–µ —Å–ª–æ—Ç –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ (1-{game_manager.total_slots}): "))
            warrior = game_manager.load_warrior(slot)
            if not warrior:
                return None, None, None
        else:
            print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä")
            return None, None, None

        warriors.append(warrior)

    return warriors, player_names, authenticated_profiles


def start_1v1_battle(game_manager):
    if not game_manager.profile_manager.current_profile:
        print("‚ùå –°–Ω–∞—á–∞–ª–∞ –≤–æ–π–¥–∏—Ç–µ –≤ –ø—Ä–æ—Ñ–∏–ª—å")
        wait_for_enter()
        return

    clear_screen()
    print("\n=== –ë–ò–¢–í–ê 1 –ù–ê 1 ===")
    print("1. –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π")
    print("2. –ó–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è")

    choice = input("\n–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç: ")

    # –ü–µ—Ä–≤—ã–π –∏–≥—Ä–æ–∫ (—Ç–µ–∫—É—â–∏–π –ø—Ä–æ—Ñ–∏–ª—å)
    player1_name = game_manager.profile_manager.current_profile.username
    player1_profile = game_manager.profile_manager.current_profile

    # –í—Ç–æ—Ä–æ–π –∏–≥—Ä–æ–∫ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –ø–∞—Ä–æ–ª—è
    clear_screen()
    print("\n=== –í–¢–û–†–û–ô –ò–ì–†–û–ö ===")
    player2_name = input("–í–≤–µ–¥–∏—Ç–µ –∏–º—è –≤—Ç–æ—Ä–æ–≥–æ –∏–≥—Ä–æ–∫–∞: ").strip() or "–ò–≥—Ä–æ–∫ 2"

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä–æ–ª—å –¥–ª—è –≤—Ç–æ—Ä–æ–≥–æ –∏–≥—Ä–æ–∫–∞
    player2_profile = game_manager.profile_manager.verify_player_password(player2_name)
    if player2_profile is None and player2_name != "–ò–≥—Ä–æ–∫ 2":
        # –ï—Å–ª–∏ –ø—Ä–æ—Ñ–∏–ª—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –Ω–æ –ø–∞—Ä–æ–ª—å –Ω–µ–≤–µ—Ä–Ω—ã–π, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏–º—è –±–µ–∑ –ø—Ä–æ—Ñ–∏–ª—è
        player2_name = f"{player2_name} (–±–µ–∑ –ø—Ä–æ—Ñ–∏–ª—è)"

    player_names = [player1_name, player2_name]
    authenticated_profiles = [player1_profile, player2_profile]

    if choice == "1":
        clear_screen()
        print(f"\n--- –ü–µ—Ä–≤—ã–π –≤–æ–∏–Ω ({player1_name}) ---")
        warrior1 = create_warrior_interactive()
        clear_screen()
        print(f"\n--- –í—Ç–æ—Ä–æ–π –≤–æ–∏–Ω ({player2_name}) ---")
        warrior2 = create_warrior_interactive()
    elif choice == "2":
        clear_screen()
        game_manager.show_save_slots()
        slot1 = int(input(f"\n–í–≤–µ–¥–∏—Ç–µ —Å–ª–æ—Ç –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ –≤–æ–∏–Ω–∞ (1-{game_manager.total_slots}): "))
        warrior1 = game_manager.load_warrior(slot1)
        if not warrior1:
            wait_for_enter()
            return

        slot2 = int(input(f"–í–≤–µ–¥–∏—Ç–µ —Å–ª–æ—Ç –¥–ª—è –≤—Ç–æ—Ä–æ–≥–æ –≤–æ–∏–Ω–∞ (1-{game_manager.total_slots}): "))
        warrior2 = game_manager.load_warrior(slot2)
        if not warrior2:
            wait_for_enter()
            return
    else:
        print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä")
        wait_for_enter()
        return

    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–∏—Ç–≤—É 1 –Ω–∞ 1
    run_1v1_battle(warrior1, warrior2, game_manager, player_names, authenticated_profiles)


def start_2v2_battle(game_manager):
    """–ó–∞–ø—É—Å–∫ –±–∏—Ç–≤—ã 2 –Ω–∞ 2 —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –ø–∞—Ä–æ–ª–µ–π"""
    warriors, player_names, authenticated_profiles = get_warriors_for_multiplayer(game_manager, 4, "–ë–ò–¢–í–ê 2 –ù–ê 2")
    if not warriors:
        return

    # –†–∞–∑–¥–µ–ª—è–µ–º –Ω–∞ –∫–æ–º–∞–Ω–¥—ã
    team1 = warriors[:2]
    team2 = warriors[2:]
    team1_names = player_names[:2]
    team2_names = player_names[2:]
    team1_profiles = authenticated_profiles[:2]
    team2_profiles = authenticated_profiles[2:]

    all_player_names = team1_names + team2_names
    all_authenticated_profiles = team1_profiles + team2_profiles

    run_2v2_battle(team1, team2, game_manager, all_player_names, all_authenticated_profiles)


def start_3player_battle(game_manager):
    """–ó–∞–ø—É—Å–∫ –±–∏—Ç–≤—ã 3 –∏–≥—Ä–æ–∫–∞ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –ø–∞—Ä–æ–ª–µ–π"""
    warriors, player_names, authenticated_profiles = get_warriors_for_multiplayer(game_manager, 3, "–ë–ò–¢–í–ê 3 –ò–ì–†–û–ö–ê")
    if not warriors:
        return

    run_royal_battle(warriors, game_manager, player_names, authenticated_profiles, "3 –∏–≥—Ä–æ–∫–∞")


def start_4player_battle(game_manager):
    """–ó–∞–ø—É—Å–∫ –±–∏—Ç–≤—ã 4 –∏–≥—Ä–æ–∫–∞ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –ø–∞—Ä–æ–ª–µ–π"""
    warriors, player_names, authenticated_profiles = get_warriors_for_multiplayer(game_manager, 4, "–ë–ò–¢–í–ê 4 –ò–ì–†–û–ö–ê")
    if not warriors:
        return

    run_royal_battle(warriors, game_manager, player_names, authenticated_profiles, "4 –∏–≥—Ä–æ–∫–∞")


def start_bot_battle(game_manager):
    """–ó–∞–ø—É—Å–∫ –±–∏—Ç–≤—ã —Å –±–æ—Ç–∞–º–∏ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –ø–∞—Ä–æ–ª–µ–π"""
    clear_screen()
    print("ü§ñ –ë–ò–¢–í–ê –° –ë–û–¢–ê–ú–ò")
    print("=" * 30)

    # –í—ã–±–æ—Ä –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –±–æ—Ç–æ–≤
    try:
        num_bots = int(input("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–æ—Ç–æ–≤ (1-5): "))
        if num_bots < 1 or num_bots > 5:
            print("‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–æ—Ç–æ–≤. –î–æ–ø—É—Å—Ç–∏–º–æ: 1-5")
            wait_for_enter()
            return
    except ValueError:
        print("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ")
        wait_for_enter()
        return

    # –í—ã–±–æ—Ä –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∏–≥—Ä–æ–∫–æ–≤
    try:
        num_players = int(input("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä–æ–∫–æ–≤ (1-3): "))
        if num_players < 1 or num_players > 3:
            print("‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä–æ–∫–æ–≤. –î–æ–ø—É—Å—Ç–∏–º–æ: 1-3")
            wait_for_enter()
            return
    except ValueError:
        print("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ")
        wait_for_enter()
        return

    total_participants = num_players + num_bots
    if total_participants < 2:
        print("‚ùå –î–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ö–æ—Ç—è –±—ã 1 –∏–≥—Ä–æ–∫ –∏ 1 –±–æ—Ç")
        wait_for_enter()
        return

    warriors = []
    player_names = []
    authenticated_profiles = []

    # –°–æ–∑–¥–∞–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π –¥–ª—è –∏–≥—Ä–æ–∫–æ–≤ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –ø–∞—Ä–æ–ª–µ–π
    for i in range(num_players):
        clear_screen()
        print(f"\n--- –ò–≥—Ä–æ–∫ {i + 1} ---")

        player_name = input("–í–≤–µ–¥–∏—Ç–µ –∏–º—è –∏–≥—Ä–æ–∫–∞: ").strip() or f"–ò–≥—Ä–æ–∫ {i + 1}"

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä–æ–ª—å –¥–ª—è –∏–≥—Ä–æ–∫–∞
        profile = game_manager.profile_manager.verify_player_password(player_name)

        if profile:
            player_names.append(profile.username)
            authenticated_profiles.append(profile)
        else:
            player_names.append(player_name)
            authenticated_profiles.append(None)

        print("1. –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞")
        print("2. –ó–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è")
        choice = input("–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç: ")

        if choice == "1":
            warrior = create_warrior_interactive()
        elif choice == "2":
            game_manager.show_save_slots()
            slot = int(input(f"–í–≤–µ–¥–∏—Ç–µ —Å–ª–æ—Ç –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ (1-{game_manager.total_slots}): "))
            warrior = game_manager.load_warrior(slot)
            if not warrior:
                return
        else:
            print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä")
            return

        warriors.append(warrior)

    # –°–æ–∑–¥–∞–Ω–∏–µ –±–æ—Ç–æ–≤
    for i in range(num_bots):
        bot_warrior = generate_bot_warrior(i + 1)
        warriors.append(bot_warrior)
        player_names.append(f"–ë–æ—Ç {i + 1}")
        authenticated_profiles.append(None)

    # –ó–∞–ø—É—Å–∫ –±–∏—Ç–≤—ã —Å –±–æ—Ç–∞–º–∏
    run_bot_battle(warriors, game_manager, player_names, authenticated_profiles, num_bots)


def battle_modes_menu(game_manager):
    """–ú–µ–Ω—é —Ä–µ–∂–∏–º–æ–≤ —Å—Ä–∞–∂–µ–Ω–∏–π"""
    while True:
        clear_screen()
        print("üéØ –†–ï–ñ–ò–ú–´ –°–†–ê–ñ–ï–ù–ò–ô")
        print("=" * 50)
        print(f"\n1. –ë–∏—Ç–≤–∞ 1 –Ω–∞ 1")
        print(f"2. –ë–∏—Ç–≤–∞ 2 –Ω–∞ 2 (–∫–æ–º–∞–Ω–¥–Ω–∞—è)")
        print(f"3. –ë–∏—Ç–≤–∞ 3 –∏–≥—Ä–æ–∫–∞ (–∫–æ—Ä–æ–ª–µ–≤—Å–∫–∞—è –±–∏—Ç–≤–∞)")
        print(f"4. –ë–∏—Ç–≤–∞ 4 –∏–≥—Ä–æ–∫–∞ (–∫–∞–∂–¥—ã–π –∑–∞ —Å–µ–±—è)")
        print(f"5. –ë–∏—Ç–≤–∞ —Å –±–æ—Ç–∞–º–∏")
        print(f"6. –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")

        choice = input("\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º: ")

        if choice == "1":
            start_1v1_battle(game_manager)
        elif choice == "2":
            start_2v2_battle(game_manager)
        elif choice == "3":
            start_3player_battle(game_manager)
        elif choice == "4":
            start_4player_battle(game_manager)
        elif choice == "5":
            start_bot_battle(game_manager)
        elif choice == "6":
            break
        else:
            print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä")
            wait_for_enter()


def create_and_save_warrior(game_manager):
    if not game_manager.profile_manager.current_profile or not game_manager.profile_manager.current_profile.is_developer:
        print("‚ùå –¢–æ–ª—å–∫–æ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∏ –º–æ–≥—É—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π")
        wait_for_enter()
        return

    clear_screen()
    print("\n=== –°–û–ó–î–ê–ù–ò–ï –ò –°–û–•–†–ê–ù–ï–ù–ò–ï –ü–ï–†–°–û–ù–ê–ñ–ê ===")

    game_manager.show_save_slots()
    slot = int(input(f"\n–í–≤–µ–¥–∏—Ç–µ —Å–ª–æ—Ç –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è (1-{game_manager.total_slots}): "))

    if slot < 1 or slot > game_manager.total_slots:
        print(f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Å–ª–æ—Ç. –î–æ–ø—É—Å—Ç–∏–º—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è: 1-{game_manager.total_slots}")
        wait_for_enter()
        return

    warrior = create_warrior_interactive()
    game_manager.save_warrior(warrior, slot)
    wait_for_enter()


def show_save_slots_menu(game_manager):
    clear_screen()
    print("\n=== –°–õ–û–¢–´ –°–û–•–†–ê–ù–ï–ù–ò–Ø ===")
    game_manager.show_save_slots()
    wait_for_enter()


def edit_warrior_menu(game_manager):
    clear_screen()
    print("\n=== –†–ï–î–ê–ö–¢–ò–†–û–í–ê–ù–ò–ï –ü–ï–†–°–û–ù–ê–ñ–ê ===")

    game_manager.show_save_slots()
    slot = int(input(f"\n–í–≤–µ–¥–∏—Ç–µ —Å–ª–æ—Ç –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (1-{game_manager.total_slots}): "))

    if slot < 1 or slot > game_manager.total_slots:
        print(f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Å–ª–æ—Ç. –î–æ–ø—É—Å—Ç–∏–º—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è: 1-{game_manager.total_slots}")
        wait_for_enter()
        return

    game_manager.edit_warrior(slot)


def delete_warrior_menu(game_manager):
    clear_screen()
    print("\n=== –£–î–ê–õ–ï–ù–ò–ï –ü–ï–†–°–û–ù–ê–ñ–ê ===")

    game_manager.show_save_slots()
    slot = int(input(f"\n–í–≤–µ–¥–∏—Ç–µ —Å–ª–æ—Ç –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è (1-{game_manager.total_slots}): "))

    if slot < 1 or slot > game_manager.total_slots:
        print(f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Å–ª–æ—Ç. –î–æ–ø—É—Å—Ç–∏–º—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è: 1-{game_manager.total_slots}")
        wait_for_enter()
        return

    game_manager.delete_warrior(slot)


def profile_menu(game_manager):
    while True:
        clear_screen()
        print("üë§ –£–ü–†–ê–í–õ–ï–ù–ò–ï –ü–†–û–§–ò–õ–ï–ú")
        print("=" * 30)

        if game_manager.profile_manager.current_profile:
            print(f"–¢–µ–∫—É—â–∏–π –ø—Ä–æ—Ñ–∏–ª—å: {game_manager.profile_manager.current_profile.username}")
            if game_manager.profile_manager.current_profile.is_developer:
                print("üîß –†–µ–∂–∏–º —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞")
            print(f"üèÜ –ü–æ–±–µ–¥: {game_manager.profile_manager.current_profile.wins}")
            print(f"üíî –ü–æ—Ä–∞–∂–µ–Ω–∏–π: {game_manager.profile_manager.current_profile.losses}")
            print(f"‚≠ê –†–µ–π—Ç–∏–Ω–≥: {game_manager.profile_manager.current_profile.rating}")
        else:
            print("‚ùå –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –≤—ã–±—Ä–∞–Ω")

        print(f"\n1. –°–æ–∑–¥–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å")
        print(f"2. –í–æ–π—Ç–∏ –≤ –ø—Ä–æ—Ñ–∏–ª—å")
        print(f"3. –í—ã–π—Ç–∏ –∏–∑ –ø—Ä–æ—Ñ–∏–ª—è")
        print(f"4. –ù–∞–∑–∞–¥")

        choice = input("\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ: ")

        if choice == "1":
            new_profile = game_manager.profile_manager.create_profile()
            if new_profile:
                game_manager.profile_manager.current_profile = new_profile
        elif choice == "2":
            game_manager.profile_manager.login()
        elif choice == "3":
            game_manager.profile_manager.logout()
        elif choice == "4":
            break
        else:
            print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä")
            wait_for_enter()


def main():
    game_manager = GameManager()
    game_manager.create_default_warriors()

    while True:
        clear_screen()
        print("üéÆ –ú–ò–ù–ò-–ò–ì–†–ê '–ë–ò–¢–í–ê' üéÆ")
        print("=" * 50)

        if game_manager.profile_manager.current_profile:
            print(f"üë§ –¢–µ–∫—É—â–∏–π –ø—Ä–æ—Ñ–∏–ª—å: {game_manager.profile_manager.current_profile.username}")
            if game_manager.profile_manager.current_profile.is_developer:
                print("üîß –†–µ–∂–∏–º —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞")
            print(f"üèÜ –ü–æ–±–µ–¥: {game_manager.profile_manager.current_profile.wins} | "
                  f"–ü–æ—Ä–∞–∂–µ–Ω–∏–π: {game_manager.profile_manager.current_profile.losses}")
        else:
            print("‚ùå –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –≤—ã–±—Ä–∞–Ω")

        print(f"\n1. –ü—Ä–æ—Ñ–∏–ª—å")
        print(f"2. –†–µ–∂–∏–º—ã —Å—Ä–∞–∂–µ–Ω–∏–π")
        print(f"3. –°–æ–∑–¥–∞—Ç—å –∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞")
        print(f"4. –ü–æ–∫–∞–∑–∞—Ç—å —Å–ª–æ—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è")
        print(f"5. –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞")
        print(f"6. –£–¥–∞–ª–∏—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞")
        print(f"7. –ò—Å—Ç–æ—Ä–∏—è –±–∏—Ç–≤")
        print(f"8. –¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤")
        print(f"9. –û–±—É—á–µ–Ω–∏–µ")
        print(f"0. –í—ã–π—Ç–∏")

        choice = input("\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ: ")

        if choice == "1":
            profile_menu(game_manager)
        elif choice == "2":
            if game_manager.profile_manager.current_profile:
                battle_modes_menu(game_manager)
            else:
                print("‚ùå –°–Ω–∞—á–∞–ª–∞ –≤–æ–π–¥–∏—Ç–µ –≤ –ø—Ä–æ—Ñ–∏–ª—å")
                wait_for_enter()
        elif choice == "3":
            create_and_save_warrior(game_manager)
        elif choice == "4":
            show_save_slots_menu(game_manager)
        elif choice == "5":
            edit_warrior_menu(game_manager)
        elif choice == "6":
            delete_warrior_menu(game_manager)
        elif choice == "7":
            game_manager.battle_history.show_history()
        elif choice == "8":
            game_manager.leaderboard.show_leaderboard()
        elif choice == "9":
            show_tutorial()
        elif choice == "0":
            clear_screen()
            print("üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
            break
        else:
            print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä")
            wait_for_enter()


if __name__ == "__main__":
    main()